
// Informations and data are from various sources.
// Some of them are the folowing:
// http://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf
// http://infoscience.epfl.ch/record/34089/files/
// http://www.cie.co.at
// http://www.hunterlab.com/appnotes/an05_05.pdf
// http://brucelindbloom.com/



// The following values are from www.cvrl.org
// They are not used in this library but are here for documentation reasons.
//
//// Steps: 1nm
//#define CML_X2VALENCES_1931_MIN 360.f
//#define CML_X2VALENCES_1931_MAX 830.f
//#define CML_X2VALENCES_1931_NUM 471
//static const float x2valences1931[CML_X2VALENCES_1931_NUM] = {
//  0.000129900000f, 0.000145847000f, 0.000163802100f, 0.000184003700f, 0.000206690200f,
//  0.000232100000f, 0.000260728000f, 0.000293075000f, 0.000329388000f, 0.000369914000f,
//  0.000414900000f, 0.000464158700f, 0.000518986000f, 0.000581854000f, 0.000655234700f,
//  0.000741600000f, 0.000845029600f, 0.000964526800f, 0.001094949000f, 0.001231154000f,
//  0.001368000000f, 0.001502050000f, 0.001642328000f, 0.001802382000f, 0.001995757000f,
//  0.002236000000f, 0.002535385000f, 0.002892603000f, 0.003300829000f, 0.003753236000f,
//  0.004243000000f, 0.004762389000f, 0.005330048000f, 0.005978712000f, 0.006741117000f,
//  0.007650000000f, 0.008751373000f, 0.010028880000f, 0.011421700000f, 0.012869010000f,
//  0.014310000000f, 0.015704430000f, 0.017147440000f, 0.018781220000f, 0.020748010000f,
//  0.023190000000f, 0.026207360000f, 0.029782480000f, 0.033880920000f, 0.038468240000f,
//  0.043510000000f, 0.048995600000f, 0.055022600000f, 0.061718800000f, 0.069212000000f,
//  0.077630000000f, 0.086958110000f, 0.097176720000f, 0.108406300000f, 0.120767200000f,
//  0.134380000000f, 0.149358200000f, 0.165395700000f, 0.181983100000f, 0.198611000000f,
//  0.214770000000f, 0.230186800000f, 0.244879700000f, 0.258777300000f, 0.271807900000f,
//  0.283900000000f, 0.294943800000f, 0.304896500000f, 0.313787300000f, 0.321645400000f,
//  0.328500000000f, 0.334351300000f, 0.339210100000f, 0.343121300000f, 0.346129600000f,
//  0.348280000000f, 0.349599900000f, 0.350147400000f, 0.350013000000f, 0.349287000000f,
//  0.348060000000f, 0.346373300000f, 0.344262400000f, 0.341808800000f, 0.339094100000f,
//  0.336200000000f, 0.333197700000f, 0.330041100000f, 0.326635700000f, 0.322886800000f,
//  0.318700000000f, 0.314025100000f, 0.308884000000f, 0.303290400000f, 0.297257900000f,
//  0.290800000000f, 0.283970100000f, 0.276721400000f, 0.268917800000f, 0.260422700000f,
//  0.251100000000f, 0.240847500000f, 0.229851200000f, 0.218407200000f, 0.206811500000f,
//  0.195360000000f, 0.184213600000f, 0.173327300000f, 0.162688100000f, 0.152283300000f,
//  0.142100000000f, 0.132178600000f, 0.122569600000f, 0.113275200000f, 0.104297900000f,
//  0.095640000000f, 0.087299550000f, 0.079308040000f, 0.071717760000f, 0.064580990000f,
//  0.057950010000f, 0.051862110000f, 0.046281520000f, 0.041150880000f, 0.036412830000f,
//  0.032010000000f, 0.027917200000f, 0.024144400000f, 0.020687000000f, 0.017540400000f,
//  0.014700000000f, 0.012161790000f, 0.009919960000f, 0.007967240000f, 0.006296346000f,
//  0.004900000000f, 0.003777173000f, 0.002945320000f, 0.002424880000f, 0.002236293000f,
//  0.002400000000f, 0.002925520000f, 0.003836560000f, 0.005174840000f, 0.006982080000f,
//  0.009300000000f, 0.012149490000f, 0.015535880000f, 0.019477520000f, 0.023992770000f,
//  0.029100000000f, 0.034814850000f, 0.041120160000f, 0.047985040000f, 0.055378610000f,
//  0.063270000000f, 0.071635010000f, 0.080462240000f, 0.089739960000f, 0.099456450000f,
//  0.109600000000f, 0.120167400000f, 0.131114500000f, 0.142367900000f, 0.153854200000f,
//  0.165500000000f, 0.177257100000f, 0.189140000000f, 0.201169400000f, 0.213365800000f,
//  0.225749900000f, 0.238320900000f, 0.251066800000f, 0.263992200000f, 0.277101700000f,
//  0.290400000000f, 0.303891200000f, 0.317572600000f, 0.331438400000f, 0.345482800000f,
//  0.359700000000f, 0.374083900000f, 0.388639600000f, 0.403378400000f, 0.418311500000f,
//  0.433449900000f, 0.448795300000f, 0.464336000000f, 0.480064000000f, 0.495971300000f,
//  0.512050100000f, 0.528295900000f, 0.544691600000f, 0.561209400000f, 0.577821500000f,
//  0.594500000000f, 0.611220900000f, 0.627975800000f, 0.644760200000f, 0.661569700000f,
//  0.678400000000f, 0.695239200000f, 0.712058600000f, 0.728828400000f, 0.745518800000f,
//  0.762100000000f, 0.778543200000f, 0.794825600000f, 0.810926400000f, 0.826824800000f,
//  0.842500000000f, 0.857932500000f, 0.873081600000f, 0.887894400000f, 0.902318100000f,
//  0.916300000000f, 0.929799500000f, 0.942798400000f, 0.955277600000f, 0.967217900000f,
//  0.978600000000f, 0.989385600000f, 0.999548800000f, 1.009089200000f, 1.018006400000f,
//  1.026300000000f, 1.033982700000f, 1.040986000000f, 1.047188000000f, 1.052466700000f,
//  1.056700000000f, 1.059794400000f, 1.061799200000f, 1.062806800000f, 1.062909600000f,
//  1.062200000000f, 1.060735200000f, 1.058443600000f, 1.055224400000f, 1.050976800000f,
//  1.045600000000f, 1.039036900000f, 1.031360800000f, 1.022666200000f, 1.013047700000f,
//  1.002600000000f, 0.991367500000f, 0.979331400000f, 0.966491600000f, 0.952847900000f,
//  0.938400000000f, 0.923194000000f, 0.907244000000f, 0.890502000000f, 0.872920000000f,
//  0.854449900000f, 0.835084000000f, 0.814946000000f, 0.794186000000f, 0.772954000000f,
//  0.751400000000f, 0.729583600000f, 0.707588800000f, 0.685602200000f, 0.663810400000f,
//  0.642400000000f, 0.621514900000f, 0.601113800000f, 0.581105200000f, 0.561397700000f,
//  0.541900000000f, 0.522599500000f, 0.503546400000f, 0.484743600000f, 0.466193900000f,
//  0.447900000000f, 0.429861300000f, 0.412098000000f, 0.394644000000f, 0.377533300000f,
//  0.360800000000f, 0.344456300000f, 0.328516800000f, 0.313019200000f, 0.298001100000f,
//  0.283500000000f, 0.269544800000f, 0.256118400000f, 0.243189600000f, 0.230727200000f,
//  0.218700000000f, 0.207097100000f, 0.195923200000f, 0.185170800000f, 0.174832300000f,
//  0.164900000000f, 0.155366700000f, 0.146230000000f, 0.137490000000f, 0.129146700000f,
//  0.121200000000f, 0.113639700000f, 0.106465000000f, 0.099690440000f, 0.093330610000f,
//  0.087400000000f, 0.081900960000f, 0.076804280000f, 0.072077120000f, 0.067686640000f,
//  0.063600000000f, 0.059806850000f, 0.056282160000f, 0.052971040000f, 0.049818610000f,
//  0.046770000000f, 0.043784050000f, 0.040875360000f, 0.038072640000f, 0.035404610000f,
//  0.032900000000f, 0.030564190000f, 0.028380560000f, 0.026344840000f, 0.024452750000f,
//  0.022700000000f, 0.021084290000f, 0.019599880000f, 0.018237320000f, 0.016987170000f,
//  0.015840000000f, 0.014790640000f, 0.013831320000f, 0.012948680000f, 0.012129200000f,
//  0.011359160000f, 0.010629350000f, 0.009938846000f, 0.009288422000f, 0.008678854000f,
//  0.008110916000f, 0.007582388000f, 0.007088746000f, 0.006627313000f, 0.006195408000f,
//  0.005790346000f, 0.005409826000f, 0.005052583000f, 0.004717512000f, 0.004403507000f,
//  0.004109457000f, 0.003833913000f, 0.003575748000f, 0.003334342000f, 0.003109075000f,
//  0.002899327000f, 0.002704348000f, 0.002523020000f, 0.002354168000f, 0.002196616000f,
//  0.002049190000f, 0.001910960000f, 0.001781438000f, 0.001660110000f, 0.001546459000f,
//  0.001439971000f, 0.001340042000f, 0.001246275000f, 0.001158471000f, 0.001076430000f,
//  0.000999949300f, 0.000928735800f, 0.000862433200f, 0.000800750300f, 0.000743396000f,
//  0.000690078600f, 0.000640515600f, 0.000594502100f, 0.000551864600f, 0.000512429000f,
//  0.000476021300f, 0.000442453600f, 0.000411511700f, 0.000382981400f, 0.000356649100f,
//  0.000332301100f, 0.000309758600f, 0.000288887100f, 0.000269539400f, 0.000251568200f,
//  0.000234826100f, 0.000219171000f, 0.000204525800f, 0.000190840500f, 0.000178065400f,
//  0.000166150500f, 0.000155023600f, 0.000144621900f, 0.000134909800f, 0.000125852000f,
//  0.000117413000f, 0.000109551500f, 0.000102224500f, 0.000095394450f, 0.000089023900f,
//  0.000083075270f, 0.000077512690f, 0.000072313040f, 0.000067457780f, 0.000062928440f,
//  0.000058706520f, 0.000054770280f, 0.000051099180f, 0.000047676540f, 0.000044485670f,
//  0.000041509940f, 0.000038733240f, 0.000036142030f, 0.000033723520f, 0.000031464870f,
//  0.000029353260f, 0.000027375730f, 0.000025524330f, 0.000023793760f, 0.000022178700f,
//  0.000020673830f, 0.000019272260f, 0.000017966400f, 0.000016749910f, 0.000015616480f,
//  0.000014559770f, 0.000013573870f, 0.000012654360f, 0.000011797230f, 0.000010998440f,
//  0.000010253980f, 0.000009559646f, 0.000008912044f, 0.000008308358f, 0.000007745769f,
//  0.000007221456f, 0.000006732475f, 0.000006276423f, 0.000005851304f, 0.000005455118f,
//  0.000005085868f, 0.000004741466f, 0.000004420236f, 0.000004120783f, 0.000003841716f,
//  0.000003581652f, 0.000003339127f, 0.000003112949f, 0.000002902121f, 0.000002705645f,
//  0.000002522525f, 0.000002351726f, 0.000002192415f, 0.000002043902f, 0.000001905497f,
//  0.000001776509f, 0.000001656215f, 0.000001544022f, 0.000001439440f, 0.000001341977f,
//  0.000001251141f};
//#define CML_Y2VALENCES_1931_MIN 360.f
//#define CML_Y2VALENCES_1931_MAX 830.f
//#define CML_Y2VALENCES_1931_NUM 471
//static const float y2valences1931[CML_Y2VALENCES_1931_NUM] = {
//  0.000003917000f, 0.000004393581f, 0.000004929604f, 0.000005532136f, 0.000006208245f,
//  0.000006965000f, 0.000007813219f, 0.000008767336f, 0.000009839844f, 0.000011043230f,
//  0.000012390000f, 0.000013886410f, 0.000015557280f, 0.000017442960f, 0.000019583750f,
//  0.000022020000f, 0.000024839650f, 0.000028041260f, 0.000031531040f, 0.000035215210f,
//  0.000039000000f, 0.000042826400f, 0.000046914600f, 0.000051589600f, 0.000057176400f,
//  0.000064000000f, 0.000072344210f, 0.000082212240f, 0.000093508160f, 0.000106136100f,
//  0.000120000000f, 0.000134984000f, 0.000151492000f, 0.000170208000f, 0.000191816000f,
//  0.000217000000f, 0.000246906700f, 0.000281240000f, 0.000318520000f, 0.000357266700f,
//  0.000396000000f, 0.000433714700f, 0.000473024000f, 0.000517876000f, 0.000572218700f,
//  0.000640000000f, 0.000724560000f, 0.000825500000f, 0.000941160000f, 0.001069880000f,
//  0.001210000000f, 0.001362091000f, 0.001530752000f, 0.001720368000f, 0.001935323000f,
//  0.002180000000f, 0.002454800000f, 0.002764000000f, 0.003117800000f, 0.003526400000f,
//  0.004000000000f, 0.004546240000f, 0.005159320000f, 0.005829280000f, 0.006546160000f,
//  0.007300000000f, 0.008086507000f, 0.008908720000f, 0.009767680000f, 0.010664430000f,
//  0.011600000000f, 0.012573170000f, 0.013582720000f, 0.014629680000f, 0.015715090000f,
//  0.016840000000f, 0.018007360000f, 0.019214480000f, 0.020453920000f, 0.021718240000f,
//  0.023000000000f, 0.024294610000f, 0.025610240000f, 0.026958570000f, 0.028351250000f,
//  0.029800000000f, 0.031310830000f, 0.032883680000f, 0.034521120000f, 0.036225710000f,
//  0.038000000000f, 0.039846670000f, 0.041768000000f, 0.043766000000f, 0.045842670000f,
//  0.048000000000f, 0.050243680000f, 0.052573040000f, 0.054980560000f, 0.057458720000f,
//  0.060000000000f, 0.062601970000f, 0.065277520000f, 0.068042080000f, 0.070911090000f,
//  0.073900000000f, 0.077016000000f, 0.080266400000f, 0.083666800000f, 0.087232800000f,
//  0.090980000000f, 0.094917550000f, 0.099045840000f, 0.103367400000f, 0.107884600000f,
//  0.112600000000f, 0.117532000000f, 0.122674400000f, 0.127992800000f, 0.133452800000f,
//  0.139020000000f, 0.144676400000f, 0.150469300000f, 0.156461900000f, 0.162717700000f,
//  0.169300000000f, 0.176243100000f, 0.183558100000f, 0.191273500000f, 0.199418000000f,
//  0.208020000000f, 0.217119900000f, 0.226734500000f, 0.236857100000f, 0.247481200000f,
//  0.258600000000f, 0.270184900000f, 0.282293900000f, 0.295050500000f, 0.308578000000f,
//  0.323000000000f, 0.338402100000f, 0.354685800000f, 0.371698600000f, 0.389287500000f,
//  0.407300000000f, 0.425629900000f, 0.444309600000f, 0.463394400000f, 0.482939500000f,
//  0.503000000000f, 0.523569300000f, 0.544512000000f, 0.565690000000f, 0.586965300000f,
//  0.608200000000f, 0.629345600000f, 0.650306800000f, 0.670875200000f, 0.690842400000f,
//  0.710000000000f, 0.728185200000f, 0.745463600000f, 0.761969400000f, 0.777836800000f,
//  0.793200000000f, 0.808110400000f, 0.822496200000f, 0.836306800000f, 0.849491600000f,
//  0.862000000000f, 0.873810800000f, 0.884962400000f, 0.895493600000f, 0.905443200000f,
//  0.914850100000f, 0.923734800000f, 0.932092400000f, 0.939922600000f, 0.947225200000f,
//  0.954000000000f, 0.960256100000f, 0.966007400000f, 0.971260600000f, 0.976022500000f,
//  0.980300000000f, 0.984092400000f, 0.987418200000f, 0.990312800000f, 0.992811600000f,
//  0.994950100000f, 0.996710800000f, 0.998098300000f, 0.999112000000f, 0.999748200000f,
//  1.000000000000f, 0.999856700000f, 0.999304600000f, 0.998325500000f, 0.996898700000f,
//  0.995000000000f, 0.992600500000f, 0.989742600000f, 0.986444400000f, 0.982724100000f,
//  0.978600000000f, 0.974083700000f, 0.969171200000f, 0.963856800000f, 0.958134900000f,
//  0.952000000000f, 0.945450400000f, 0.938499200000f, 0.931162800000f, 0.923457600000f,
//  0.915400000000f, 0.907006400000f, 0.898277200000f, 0.889204800000f, 0.879781600000f,
//  0.870000000000f, 0.859861300000f, 0.849392000000f, 0.838622000000f, 0.827581300000f,
//  0.816300000000f, 0.804794700000f, 0.793082000000f, 0.781192000000f, 0.769154700000f,
//  0.757000000000f, 0.744754100000f, 0.732422400000f, 0.720003600000f, 0.707496500000f,
//  0.694900000000f, 0.682219200000f, 0.669471600000f, 0.656674400000f, 0.643844800000f,
//  0.631000000000f, 0.618155500000f, 0.605314400000f, 0.592475600000f, 0.579637900000f,
//  0.566800000000f, 0.553961100000f, 0.541137200000f, 0.528352800000f, 0.515632300000f,
//  0.503000000000f, 0.490468800000f, 0.478030400000f, 0.465677600000f, 0.453403200000f,
//  0.441200000000f, 0.429080000000f, 0.417036000000f, 0.405032000000f, 0.393032000000f,
//  0.381000000000f, 0.368918400000f, 0.356827200000f, 0.344776800000f, 0.332817600000f,
//  0.321000000000f, 0.309338100000f, 0.297850400000f, 0.286593600000f, 0.275624500000f,
//  0.265000000000f, 0.254763200000f, 0.244889600000f, 0.235334400000f, 0.226052800000f,
//  0.217000000000f, 0.208161600000f, 0.199548800000f, 0.191155200000f, 0.182974400000f,
//  0.175000000000f, 0.167223500000f, 0.159646400000f, 0.152277600000f, 0.145125900000f,
//  0.138200000000f, 0.131500300000f, 0.125024800000f, 0.118779200000f, 0.112769100000f,
//  0.107000000000f, 0.101476200000f, 0.096188640000f, 0.091122960000f, 0.086264850000f,
//  0.081600000000f, 0.077120640000f, 0.072825520000f, 0.068710080000f, 0.064769760000f,
//  0.061000000000f, 0.057396210000f, 0.053955040000f, 0.050673760000f, 0.047549650000f,
//  0.044580000000f, 0.041758720000f, 0.039084960000f, 0.036563840000f, 0.034200480000f,
//  0.032000000000f, 0.029962610000f, 0.028076640000f, 0.026329360000f, 0.024708050000f,
//  0.023200000000f, 0.021800770000f, 0.020501120000f, 0.019281080000f, 0.018120690000f,
//  0.017000000000f, 0.015903790000f, 0.014837180000f, 0.013810680000f, 0.012834780000f,
//  0.011920000000f, 0.011068310000f, 0.010273390000f, 0.009533311000f, 0.008846157000f,
//  0.008210000000f, 0.007623781000f, 0.007085424000f, 0.006591476000f, 0.006138485000f,
//  0.005723000000f, 0.005343059000f, 0.004995796000f, 0.004676404000f, 0.004380075000f,
//  0.004102000000f, 0.003838453000f, 0.003589099000f, 0.003354219000f, 0.003134093000f,
//  0.002929000000f, 0.002738139000f, 0.002559876000f, 0.002393244000f, 0.002237275000f,
//  0.002091000000f, 0.001953587000f, 0.001824580000f, 0.001703580000f, 0.001590187000f,
//  0.001484000000f, 0.001384496000f, 0.001291268000f, 0.001204092000f, 0.001122744000f,
//  0.001047000000f, 0.000976589600f, 0.000911108800f, 0.000850133200f, 0.000793238400f,
//  0.000740000000f, 0.000690082700f, 0.000643310000f, 0.000599496000f, 0.000558454700f,
//  0.000520000000f, 0.000483913600f, 0.000450052800f, 0.000418345200f, 0.000388718400f,
//  0.000361100000f, 0.000335383500f, 0.000311440400f, 0.000289165600f, 0.000268453900f,
//  0.000249200000f, 0.000231301900f, 0.000214685600f, 0.000199288400f, 0.000185047500f,
//  0.000171900000f, 0.000159778100f, 0.000148604400f, 0.000138301600f, 0.000128792500f,
//  0.000120000000f, 0.000111859500f, 0.000104322400f, 0.000097335600f, 0.000090845870f,
//  0.000084800000f, 0.000079146670f, 0.000073858000f, 0.000068916000f, 0.000064302670f, 
//  0.000060000000f, 0.000055981870f, 0.000052225600f, 0.000048718400f, 0.000045447470f,
//  0.000042400000f, 0.000039561040f, 0.000036915120f, 0.000034448680f, 0.000032148160f,
//  0.000030000000f, 0.000027991250f, 0.000026113560f, 0.000024360240f, 0.000022724610f,
//  0.000021200000f, 0.000019778550f, 0.000018452850f, 0.000017216870f, 0.000016064590f,
//  0.000014990000f, 0.000013987280f, 0.000013051550f, 0.000012178180f, 0.000011362540f,
//  0.000010600000f, 0.000009885877f, 0.000009217304f, 0.000008592362f, 0.000008009133f,
//  0.000007465700f, 0.000006959567f, 0.000006487995f, 0.000006048699f, 0.000005639396f,
//  0.000005257800f, 0.000004901771f, 0.000004569720f, 0.000004260194f, 0.000003971739f,
//  0.000003702900f, 0.000003452163f, 0.000003218302f, 0.000003000300f, 0.000002797139f,
//  0.000002607800f, 0.000002431220f, 0.000002266531f, 0.000002113013f, 0.000001969943f,
//  0.000001836600f, 0.000001712230f, 0.000001596228f, 0.000001488090f, 0.000001387314f,
//  0.000001293400f, 0.000001205820f, 0.000001124143f, 0.000001048009f, 0.000000977058f,
//  0.000000910930f, 0.000000849251f, 0.000000791721f, 0.000000738090f, 0.000000688110f,
//  0.000000641530f, 0.000000598090f, 0.000000557575f, 0.000000519808f, 0.000000484612f,
//  0.000000451810f};
//#define CML_Z2VALENCES_1931_MIN 360.f
//#define CML_Z2VALENCES_1931_MAX 749.f
//#define CML_Z2VALENCES_1931_NUM 390
//static const float z2valences1931[CML_Z2VALENCES_1931_NUM] = {
//  0.000606100000f, 0.000680879200f, 0.000765145600f, 0.000860012400f, 0.000966592800f,
//  0.001086000000f, 0.001220586000f, 0.001372729000f, 0.001543579000f, 0.001734286000f,
//  0.001946000000f, 0.002177777000f, 0.002435809000f, 0.002731953000f, 0.003078064000f,
//  0.003486000000f, 0.003975227000f, 0.004540880000f, 0.005158320000f, 0.005802907000f,
//  0.006450001000f, 0.007083216000f, 0.007745488000f, 0.008501152000f, 0.009414544000f,
//  0.010549990000f, 0.011965800000f, 0.013655870000f, 0.015588050000f, 0.017730150000f,
//  0.020050010000f, 0.022511360000f, 0.025202880000f, 0.028279720000f, 0.031897040000f,
//  0.036210000000f, 0.041437710000f, 0.047503720000f, 0.054119880000f, 0.060998030000f,
//  0.067850010000f, 0.074486320000f, 0.081361560000f, 0.089153640000f, 0.098540480000f,
//  0.110200000000f, 0.124613300000f, 0.141701700000f, 0.161303500000f, 0.183256800000f,
//  0.207400000000f, 0.233692100000f, 0.262611400000f, 0.294774600000f, 0.330798500000f,
//  0.371300000000f, 0.416209100000f, 0.465464200000f, 0.519694800000f, 0.579530300000f,
//  0.645600000000f, 0.718483800000f, 0.796713300000f, 0.877845900000f, 0.959439000000f,
//  1.039050100000f, 1.115367300000f, 1.188497100000f, 1.258123300000f, 1.323929600000f,
//  1.385600000000f, 1.442635200000f, 1.494803500000f, 1.542190300000f, 1.584880700000f,
//  1.622960000000f, 1.656404800000f, 1.685295900000f, 1.709874500000f, 1.730382100000f,
//  1.747060000000f, 1.760044600000f, 1.769623300000f, 1.776263700000f, 1.780433400000f,
//  1.782600000000f, 1.782968200000f, 1.781699800000f, 1.779198200000f, 1.775867100000f,
//  1.772110000000f, 1.768258900000f, 1.764039000000f, 1.758943800000f, 1.752466300000f,
//  1.744100000000f, 1.733559500000f, 1.720858100000f, 1.705936900000f, 1.688737200000f,
//  1.669200000000f, 1.647528700000f, 1.623412700000f, 1.596022300000f, 1.564528000000f,
//  1.528100000000f, 1.486111400000f, 1.439521500000f, 1.389879900000f, 1.338736200000f,
//  1.287640000000f, 1.237422300000f, 1.187824300000f, 1.138761100000f, 1.090148000000f,
//  1.041900000000f, 0.994197600000f, 0.947347300000f, 0.901453100000f, 0.856619300000f,
//  0.812950100000f, 0.770517300000f, 0.729444800000f, 0.689913600000f, 0.652104900000f,
//  0.616200000000f, 0.582328600000f, 0.550416200000f, 0.520337600000f, 0.491967300000f,
//  0.465180000000f, 0.439924600000f, 0.416183600000f, 0.393882200000f, 0.372945900000f,
//  0.353300000000f, 0.334857800000f, 0.317552100000f, 0.301337500000f, 0.286168600000f,
//  0.272000000000f, 0.258817100000f, 0.246483800000f, 0.234771800000f, 0.223453300000f,
//  0.212300000000f, 0.201169200000f, 0.190119600000f, 0.179225400000f, 0.168560800000f,
//  0.158200000000f, 0.148138300000f, 0.138375800000f, 0.128994200000f, 0.120075100000f,
//  0.111700000000f, 0.103904800000f, 0.096667480000f, 0.089982720000f, 0.083845310000f,
//  0.078249990000f, 0.073208990000f, 0.068678160000f, 0.064567840000f, 0.060788350000f,
//  0.057250010000f, 0.053904350000f, 0.050746640000f, 0.047752760000f, 0.044898590000f,
//  0.042160000000f, 0.039507280000f, 0.036935640000f, 0.034458360000f, 0.032088720000f,
//  0.029840000000f, 0.027711810000f, 0.025694440000f, 0.023787160000f, 0.021989250000f,
//  0.020300000000f, 0.018718050000f, 0.017240360000f, 0.015863640000f, 0.014584610000f,
//  0.013400000000f, 0.012307230000f, 0.011301880000f, 0.010377920000f, 0.009529306000f,
//  0.008749999000f, 0.008035200000f, 0.007381600000f, 0.006785400000f, 0.006242800000f,
//  0.005749999000f, 0.005303600000f, 0.004899800000f, 0.004534200000f, 0.004202400000f,
//  0.003900000000f, 0.003623200000f, 0.003370600000f, 0.003141400000f, 0.002934800000f,
//  0.002749999000f, 0.002585200000f, 0.002438600000f, 0.002309400000f, 0.002196800000f,
//  0.002100000000f, 0.002017733000f, 0.001948200000f, 0.001889800000f, 0.001840933000f,
//  0.001800000000f, 0.001766267000f, 0.001737800000f, 0.001711200000f, 0.001683067000f,
//  0.001650001000f, 0.001610133000f, 0.001564400000f, 0.001513600000f, 0.001458533000f,
//  0.001400000000f, 0.001336667000f, 0.001270000000f, 0.001205000000f, 0.001146667000f,
//  0.001100000000f, 0.001068800000f, 0.001049400000f, 0.001035600000f, 0.001021200000f,
//  0.001000000000f, 0.000968640000f, 0.000929920000f, 0.000886880000f, 0.000842560000f,
//  0.000800000000f, 0.000760960000f, 0.000723680000f, 0.000685920000f, 0.000645440000f,
//  0.000600000000f, 0.000547866700f, 0.000491600000f, 0.000435400000f, 0.000383466700f,
//  0.000340000000f, 0.000307253300f, 0.000283160000f, 0.000265440000f, 0.000251813300f,
//  0.000240000000f, 0.000229546700f, 0.000220640000f, 0.000211960000f, 0.000202186700f,
//  0.000190000000f, 0.000174213300f, 0.000155640000f, 0.000135960000f, 0.000116853300f,
//  0.000100000000f, 0.000086133330f, 0.000074600000f, 0.000065000000f, 0.000056933330f,
//  0.000049999990f, 0.000044160000f, 0.000039480000f, 0.000035720000f, 0.000032640000f,
//  0.000030000000f, 0.000027653330f, 0.000025560000f, 0.000023640000f, 0.000021813330f,
//  0.000020000000f, 0.000018133330f, 0.000016200000f, 0.000014200000f, 0.000012133330f,
//  0.000010000000f, 0.000007733333f, 0.000005400000f, 0.000003200000f, 0.000001333333f};
//
//
//
//// Steps: 1nm
//#define CML_X10VALENCES_1964_MIN 360.f
//#define CML_X10VALENCES_1964_MAX 830.f
//#define CML_X10VALENCES_1964_NUM 471
//static const float x10valences1964[CML_X10VALENCES_1964_NUM] = {
//  0.000000122200f, 0.000000185138f, 0.000000278830f, 0.000000417470f, 0.000000621330f,
//  0.000000919270f, 0.000001351980f, 0.000001976540f, 0.000002872500f, 0.000004149500f,
//  0.000005958600f, 0.000008505600f, 0.000012068600f, 0.000017022600f, 0.000023868000f,
//  0.000033266000f, 0.000046087000f, 0.000063472000f, 0.000086892000f, 0.000118246000f,
//  0.000159952000f, 0.000215080000f, 0.000287490000f, 0.000381990000f, 0.000504550000f,
//  0.000662440000f, 0.000864500000f, 0.001121500000f, 0.001446160000f, 0.001853590000f,
//  0.002361600000f, 0.002990600000f, 0.003764500000f, 0.004710200000f, 0.005858100000f,
//  0.007242300000f, 0.008899600000f, 0.010870900000f, 0.013198900000f, 0.015929200000f,
//  0.019109700000f, 0.022788000000f, 0.027011000000f, 0.031829000000f, 0.037278000000f,
//  0.043400000000f, 0.050223000000f, 0.057764000000f, 0.066038000000f, 0.075033000000f,
//  0.084736000000f, 0.095041000000f, 0.105836000000f, 0.117066000000f, 0.128682000000f,
//  0.140638000000f, 0.152893000000f, 0.165416000000f, 0.178191000000f, 0.191214000000f,
//  0.204492000000f, 0.217650000000f, 0.230267000000f, 0.242311000000f, 0.253793000000f,
//  0.264737000000f, 0.275195000000f, 0.285301000000f, 0.295143000000f, 0.304869000000f,
//  0.314679000000f, 0.324355000000f, 0.333570000000f, 0.342243000000f, 0.350312000000f,
//  0.357719000000f, 0.364482000000f, 0.370493000000f, 0.375727000000f, 0.380158000000f,
//  0.383734000000f, 0.386327000000f, 0.387858000000f, 0.388396000000f, 0.387978000000f,
//  0.386726000000f, 0.384696000000f, 0.382006000000f, 0.378709000000f, 0.374915000000f,
//  0.370702000000f, 0.366089000000f, 0.361045000000f, 0.355518000000f, 0.349486000000f,
//  0.342957000000f, 0.335893000000f, 0.328284000000f, 0.320150000000f, 0.311475000000f,
//  0.302273000000f, 0.292858000000f, 0.283502000000f, 0.274044000000f, 0.264263000000f,
//  0.254085000000f, 0.243392000000f, 0.232187000000f, 0.220488000000f, 0.208198000000f,
//  0.195618000000f, 0.183034000000f, 0.170222000000f, 0.157348000000f, 0.144650000000f,
//  0.132349000000f, 0.120584000000f, 0.109456000000f, 0.099042000000f, 0.089388000000f,
//  0.080507000000f, 0.072034000000f, 0.063710000000f, 0.055694000000f, 0.048117000000f,
//  0.041072000000f, 0.034642000000f, 0.028896000000f, 0.023876000000f, 0.019628000000f,
//  0.016172000000f, 0.013300000000f, 0.010759000000f, 0.008542000000f, 0.006661000000f,
//  0.005132000000f, 0.003982000000f, 0.003239000000f, 0.002934000000f, 0.003114000000f,
//  0.003816000000f, 0.005095000000f, 0.006936000000f, 0.009299000000f, 0.012147000000f,
//  0.015444000000f, 0.019156000000f, 0.023250000000f, 0.027690000000f, 0.032444000000f,
//  0.037465000000f, 0.042956000000f, 0.049114000000f, 0.055920000000f, 0.063349000000f,
//  0.071358000000f, 0.079901000000f, 0.088909000000f, 0.098293000000f, 0.107949000000f,
//  0.117749000000f, 0.127839000000f, 0.138450000000f, 0.149516000000f, 0.161041000000f,
//  0.172953000000f, 0.185209000000f, 0.197755000000f, 0.210538000000f, 0.223460000000f,
//  0.236491000000f, 0.249633000000f, 0.262972000000f, 0.276515000000f, 0.290269000000f,
//  0.304213000000f, 0.318361000000f, 0.332705000000f, 0.347232000000f, 0.361926000000f,
//  0.376772000000f, 0.391683000000f, 0.406594000000f, 0.421539000000f, 0.436517000000f,
//  0.451584000000f, 0.466782000000f, 0.482147000000f, 0.497738000000f, 0.513606000000f,
//  0.529826000000f, 0.546440000000f, 0.563426000000f, 0.580726000000f, 0.598290000000f,
//  0.616053000000f, 0.633948000000f, 0.651901000000f, 0.669824000000f, 0.687632000000f,
//  0.705224000000f, 0.722773000000f, 0.740483000000f, 0.758273000000f, 0.776083000000f,
//  0.793832000000f, 0.811436000000f, 0.828822000000f, 0.845879000000f, 0.862525000000f,
//  0.878655000000f, 0.894208000000f, 0.909206000000f, 0.923672000000f, 0.937638000000f,
//  0.951162000000f, 0.964283000000f, 0.977068000000f, 0.989590000000f, 1.001910000000f,
//  1.014160000000f, 1.026500000000f, 1.038800000000f, 1.051000000000f, 1.062900000000f,
//  1.074300000000f, 1.085200000000f, 1.095200000000f, 1.104200000000f, 1.112000000000f,
//  1.118520000000f, 1.123800000000f, 1.128000000000f, 1.131100000000f, 1.133200000000f,
//  1.134300000000f, 1.134300000000f, 1.133300000000f, 1.131200000000f, 1.128100000000f,
//  1.123990000000f, 1.118900000000f, 1.112900000000f, 1.105900000000f, 1.098000000000f,
//  1.089100000000f, 1.079200000000f, 1.068400000000f, 1.056700000000f, 1.044000000000f,
//  1.030480000000f, 1.016000000000f, 1.000800000000f, 0.984790000000f, 0.968080000000f,
//  0.950740000000f, 0.932800000000f, 0.914340000000f, 0.895390000000f, 0.876030000000f,
//  0.856297000000f, 0.836350000000f, 0.816290000000f, 0.796050000000f, 0.775610000000f,
//  0.754930000000f, 0.733990000000f, 0.712780000000f, 0.691290000000f, 0.669520000000f,
//  0.647467000000f, 0.625110000000f, 0.602520000000f, 0.579890000000f, 0.557370000000f,
//  0.535110000000f, 0.513240000000f, 0.491860000000f, 0.471080000000f, 0.450960000000f,
//  0.431567000000f, 0.412870000000f, 0.394750000000f, 0.377210000000f, 0.360190000000f,
//  0.343690000000f, 0.327690000000f, 0.312170000000f, 0.297110000000f, 0.282500000000f,
//  0.268329000000f, 0.254590000000f, 0.241300000000f, 0.228480000000f, 0.216140000000f,
//  0.204300000000f, 0.192950000000f, 0.182110000000f, 0.171770000000f, 0.161920000000f,
//  0.152568000000f, 0.143670000000f, 0.135200000000f, 0.127130000000f, 0.119480000000f,
//  0.112210000000f, 0.105310000000f, 0.098786000000f, 0.092610000000f, 0.086773000000f,
//  0.081260600000f, 0.076048000000f, 0.071114000000f, 0.066454000000f, 0.062062000000f,
//  0.057930000000f, 0.054050000000f, 0.050412000000f, 0.047006000000f, 0.043823000000f,
//  0.040850800000f, 0.038072000000f, 0.035468000000f, 0.033031000000f, 0.030753000000f,
//  0.028623000000f, 0.026635000000f, 0.024781000000f, 0.023052000000f, 0.021441000000f,
//  0.019941300000f, 0.018544000000f, 0.017241000000f, 0.016027000000f, 0.014896000000f,
//  0.013842000000f, 0.012862000000f, 0.011949000000f, 0.011100000000f, 0.010311000000f,
//  0.009576880000f, 0.008894000000f, 0.008258100000f, 0.007666400000f, 0.007116300000f,
//  0.006605200000f, 0.006130600000f, 0.005690300000f, 0.005281900000f, 0.004903300000f,
//  0.004552630000f, 0.004227500000f, 0.003925800000f, 0.003645700000f, 0.003385900000f,
//  0.003144700000f, 0.002920800000f, 0.002713000000f, 0.002520200000f, 0.002341100000f,
//  0.002174960000f, 0.002020600000f, 0.001877300000f, 0.001744100000f, 0.001620500000f,
//  0.001505700000f, 0.001399200000f, 0.001300400000f, 0.001208700000f, 0.001123600000f,
//  0.001044760000f, 0.000971560000f, 0.000903600000f, 0.000840480000f, 0.000781870000f,
//  0.000727450000f, 0.000676900000f, 0.000629960000f, 0.000586370000f, 0.000545870000f,
//  0.000508258000f, 0.000473300000f, 0.000440800000f, 0.000410580000f, 0.000382490000f,
//  0.000356380000f, 0.000332110000f, 0.000309550000f, 0.000288580000f, 0.000269090000f,
//  0.000250969000f, 0.000234130000f, 0.000218470000f, 0.000203910000f, 0.000190350000f,
//  0.000177730000f, 0.000165970000f, 0.000155020000f, 0.000144800000f, 0.000135280000f,
//  0.000126390000f, 0.000118100000f, 0.000110370000f, 0.000103150000f, 0.000096427000f,
//  0.000090151000f, 0.000084294000f, 0.000078830000f, 0.000073729000f, 0.000068969000f,
//  0.000064525800f, 0.000060376000f, 0.000056500000f, 0.000052880000f, 0.000049498000f,
//  0.000046339000f, 0.000043389000f, 0.000040634000f, 0.000038060000f, 0.000035657000f,
//  0.000033411700f, 0.000031315000f, 0.000029355000f, 0.000027524000f, 0.000025811000f,
//  0.000024209000f, 0.000022711000f, 0.000021308000f, 0.000019994000f, 0.000018764000f,
//  0.000017611500f, 0.000016532000f, 0.000015521000f, 0.000014574000f, 0.000013686000f,
//  0.000012855000f, 0.000012075000f, 0.000011345000f, 0.000010659000f, 0.000010017000f,
//  0.000009413630f, 0.000008847900f, 0.000008317100f, 0.000007819000f, 0.000007351600f,
//  0.000006913000f, 0.000006501500f, 0.000006115300f, 0.000005752900f, 0.000005412700f,
//  0.000005093470f, 0.000004793800f, 0.000004512500f, 0.000004248300f, 0.000004000200f,
//  0.000003767100f, 0.000003548000f, 0.000003342100f, 0.000003148500f, 0.000002966500f,
//  0.000002795310f, 0.000002634500f, 0.000002483400f, 0.000002341400f, 0.000002207800f,
//  0.000002082000f, 0.000001963600f, 0.000001851900f, 0.000001746500f, 0.000001647100f,
//  0.000001553140f};
//#define CML_Y10VALENCES_1964_MIN 360.f
//#define CML_Y10VALENCES_1964_MAX 830.f
//#define CML_Y10VALENCES_1964_NUM 471
//static const float y10valences1964[CML_Y10VALENCES_1964_NUM] = {
//  0.000000013398f, 0.000000020294f, 0.000000030560f, 0.000000045740f, 0.000000068050f,
//  0.000000100650f, 0.000000147980f, 0.000000216270f, 0.000000314200f, 0.000000453700f,
//  0.000000651100f, 0.000000928800f, 0.000001317500f, 0.000001857200f, 0.000002602000f,
//  0.000003625000f, 0.000005019000f, 0.000006907000f, 0.000009449000f, 0.000012848000f,
//  0.000017364000f, 0.000023327000f, 0.000031150000f, 0.000041350000f, 0.000054560000f,
//  0.000071560000f, 0.000093300000f, 0.000120870000f, 0.000155640000f, 0.000199200000f,
//  0.000253400000f, 0.000320200000f, 0.000402400000f, 0.000502300000f, 0.000623200000f,
//  0.000768500000f, 0.000941700000f, 0.001147800000f, 0.001390300000f, 0.001674000000f,
//  0.002004400000f, 0.002386000000f, 0.002822000000f, 0.003319000000f, 0.003880000000f,
//  0.004509000000f, 0.005209000000f, 0.005985000000f, 0.006833000000f, 0.007757000000f,
//  0.008756000000f, 0.009816000000f, 0.010918000000f, 0.012058000000f, 0.013237000000f,
//  0.014456000000f, 0.015717000000f, 0.017025000000f, 0.018399000000f, 0.019848000000f,
//  0.021391000000f, 0.022992000000f, 0.024598000000f, 0.026213000000f, 0.027841000000f,
//  0.029497000000f, 0.031195000000f, 0.032927000000f, 0.034738000000f, 0.036654000000f,
//  0.038676000000f, 0.040792000000f, 0.042946000000f, 0.045114000000f, 0.047333000000f,
//  0.049602000000f, 0.051934000000f, 0.054337000000f, 0.056822000000f, 0.059399000000f,
//  0.062077000000f, 0.064737000000f, 0.067285000000f, 0.069764000000f, 0.072218000000f,
//  0.074704000000f, 0.077272000000f, 0.079979000000f, 0.082874000000f, 0.086000000000f,
//  0.089456000000f, 0.092947000000f, 0.096275000000f, 0.099535000000f, 0.102829000000f,
//  0.106256000000f, 0.109901000000f, 0.113835000000f, 0.118167000000f, 0.122932000000f,
//  0.128201000000f, 0.133457000000f, 0.138323000000f, 0.143042000000f, 0.147787000000f,
//  0.152761000000f, 0.158102000000f, 0.163941000000f, 0.170362000000f, 0.177425000000f,
//  0.185190000000f, 0.193025000000f, 0.200313000000f, 0.207156000000f, 0.213644000000f,
//  0.219940000000f, 0.226170000000f, 0.232467000000f, 0.239025000000f, 0.245997000000f,
//  0.253589000000f, 0.261876000000f, 0.270643000000f, 0.279645000000f, 0.288694000000f,
//  0.297665000000f, 0.306469000000f, 0.315035000000f, 0.323335000000f, 0.331366000000f,
//  0.339133000000f, 0.347860000000f, 0.358326000000f, 0.370001000000f, 0.382464000000f,
//  0.395379000000f, 0.408482000000f, 0.421588000000f, 0.434619000000f, 0.447601000000f,
//  0.460777000000f, 0.474340000000f, 0.488200000000f, 0.502340000000f, 0.516740000000f,
//  0.531360000000f, 0.546190000000f, 0.561180000000f, 0.576290000000f, 0.591500000000f,
//  0.606741000000f, 0.622150000000f, 0.637830000000f, 0.653710000000f, 0.669680000000f,
//  0.685660000000f, 0.701550000000f, 0.717230000000f, 0.732570000000f, 0.747460000000f,
//  0.761757000000f, 0.775340000000f, 0.788220000000f, 0.800460000000f, 0.812140000000f,
//  0.823330000000f, 0.834120000000f, 0.844600000000f, 0.854870000000f, 0.865040000000f,
//  0.875211000000f, 0.885370000000f, 0.895370000000f, 0.905150000000f, 0.914650000000f,
//  0.923810000000f, 0.932550000000f, 0.940810000000f, 0.948520000000f, 0.955600000000f,
//  0.961988000000f, 0.967540000000f, 0.972230000000f, 0.976170000000f, 0.979460000000f,
//  0.982200000000f, 0.984520000000f, 0.986520000000f, 0.988320000000f, 0.990020000000f,
//  0.991761000000f, 0.993530000000f, 0.995230000000f, 0.996770000000f, 0.998090000000f,
//  0.999110000000f, 0.999770000000f, 1.000000000000f, 0.999710000000f, 0.998850000000f,
//  0.997340000000f, 0.995260000000f, 0.992740000000f, 0.989750000000f, 0.986300000000f,
//  0.982380000000f, 0.977980000000f, 0.973110000000f, 0.967740000000f, 0.961890000000f,
//  0.955552000000f, 0.948601000000f, 0.940981000000f, 0.932798000000f, 0.924158000000f,
//  0.915175000000f, 0.905954000000f, 0.896608000000f, 0.887249000000f, 0.877986000000f,
//  0.868934000000f, 0.860164000000f, 0.851519000000f, 0.842963000000f, 0.834393000000f,
//  0.825623000000f, 0.816764000000f, 0.807544000000f, 0.797947000000f, 0.787893000000f,
//  0.777405000000f, 0.766490000000f, 0.755309000000f, 0.743845000000f, 0.732190000000f,
//  0.720353000000f, 0.708281000000f, 0.696055000000f, 0.683621000000f, 0.671048000000f,
//  0.658341000000f, 0.645545000000f, 0.632718000000f, 0.619815000000f, 0.606887000000f,
//  0.593878000000f, 0.580781000000f, 0.567653000000f, 0.554490000000f, 0.541228000000f,
//  0.527963000000f, 0.514634000000f, 0.501363000000f, 0.488124000000f, 0.474935000000f,
//  0.461834000000f, 0.448823000000f, 0.435917000000f, 0.423153000000f, 0.410526000000f,
//  0.398057000000f, 0.385835000000f, 0.373951000000f, 0.362311000000f, 0.350863000000f,
//  0.339554000000f, 0.328309000000f, 0.317118000000f, 0.305936000000f, 0.294737000000f,
//  0.283493000000f, 0.272222000000f, 0.260990000000f, 0.249877000000f, 0.238946000000f,
//  0.228254000000f, 0.217853000000f, 0.207780000000f, 0.198072000000f, 0.188748000000f,
//  0.179828000000f, 0.171285000000f, 0.163059000000f, 0.155151000000f, 0.147535000000f,
//  0.140211000000f, 0.133170000000f, 0.126400000000f, 0.119892000000f, 0.113640000000f,
//  0.107633000000f, 0.101870000000f, 0.096347000000f, 0.091063000000f, 0.086010000000f,
//  0.081187000000f, 0.076583000000f, 0.072198000000f, 0.068024000000f, 0.064052000000f,
//  0.060281000000f, 0.056697000000f, 0.053292000000f, 0.050059000000f, 0.046998000000f,
//  0.044096000000f, 0.041345000000f, 0.038750700000f, 0.036297800000f, 0.033983200000f,
//  0.031800400000f, 0.029739500000f, 0.027791800000f, 0.025955100000f, 0.024226300000f,
//  0.022601700000f, 0.021077900000f, 0.019650500000f, 0.018315300000f, 0.017068600000f,
//  0.015905100000f, 0.014818300000f, 0.013800800000f, 0.012849500000f, 0.011960700000f,
//  0.011130300000f, 0.010355500000f, 0.009633200000f, 0.008959900000f, 0.008332400000f,
//  0.007748800000f, 0.007204600000f, 0.006697500000f, 0.006225100000f, 0.005785000000f,
//  0.005375100000f, 0.004994100000f, 0.004639200000f, 0.004309300000f, 0.004002800000f,
//  0.003717740000f, 0.003452620000f, 0.003205830000f, 0.002976230000f, 0.002762810000f,
//  0.002564560000f, 0.002380480000f, 0.002209710000f, 0.002051320000f, 0.001904490000f,
//  0.001768470000f, 0.001642360000f, 0.001525350000f, 0.001416720000f, 0.001315950000f,
//  0.001222390000f, 0.001135550000f, 0.001054940000f, 0.000980140000f, 0.000910660000f,
//  0.000846190000f, 0.000786290000f, 0.000730680000f, 0.000678990000f, 0.000631010000f,
//  0.000586440000f, 0.000545110000f, 0.000506720000f, 0.000471110000f, 0.000438050000f,
//  0.000407410000f, 0.000378962000f, 0.000352543000f, 0.000328001000f, 0.000305208000f,
//  0.000284041000f, 0.000264375000f, 0.000246109000f, 0.000229143000f, 0.000213376000f,
//  0.000198730000f, 0.000185115000f, 0.000172454000f, 0.000160678000f, 0.000149730000f,
//  0.000139550000f, 0.000130086000f, 0.000121290000f, 0.000113106000f, 0.000105501000f,
//  0.000098428000f, 0.000091853000f, 0.000085738000f, 0.000080048000f, 0.000074751000f,
//  0.000069819000f, 0.000065222000f, 0.000060939000f, 0.000056942000f, 0.000053217000f,
//  0.000049737000f, 0.000046491000f, 0.000043464000f, 0.000040635000f, 0.000038000000f,
//  0.000035540500f, 0.000033244800f, 0.000031100600f, 0.000029099000f, 0.000027230700f,
//  0.000025486000f, 0.000023856100f, 0.000022333200f, 0.000020910400f, 0.000019580800f,
//  0.000018338400f, 0.000017177700f, 0.000016093400f, 0.000015080000f, 0.000014133600f,
//  0.000013249000f, 0.000012422600f, 0.000011649900f, 0.000010927700f, 0.000010251900f,
//  0.000009619600f, 0.000009028100f, 0.000008474000f, 0.000007954800f, 0.000007468600f,
//  0.000007012800f, 0.000006585800f, 0.000006185700f, 0.000005810700f, 0.000005459000f,
//  0.000005129800f, 0.000004820600f, 0.000004531200f, 0.000004259100f, 0.000004004200f,
//  0.000003764730f, 0.000003539950f, 0.000003329140f, 0.000003131150f, 0.000002945290f,
//  0.000002770810f, 0.000002607050f, 0.000002453290f, 0.000002308940f, 0.000002173380f,
//  0.000002046130f, 0.000001926620f, 0.000001814400f, 0.000001708950f, 0.000001609880f,
//  0.000001516770f, 0.000001429210f, 0.000001346860f, 0.000001269450f, 0.000001196620f,
//  0.000001128090f, 0.000001063680f, 0.000001003130f, 0.000000946220f, 0.000000892630f,
//  0.000000842160f, 0.000000794640f, 0.000000749780f, 0.000000707440f, 0.000000667480f,
//  0.000000629700f};
//#define CML_Z10VALENCES_1964_MIN 360.f
//#define CML_Z10VALENCES_1964_MAX 559.f
//#define CML_Z10VALENCES_1964_NUM 200
//static const float z10valences1964[CML_Z10VALENCES_1964_NUM] = {
//  0.000000535027f, 0.000000810720f, 0.000001221200f, 0.000001828700f, 0.000002722200f,
//  0.000004028300f, 0.000005925700f, 0.000008665100f, 0.000012596000f, 0.000018201000f,
//  0.000026143700f, 0.000037330000f, 0.000052987000f, 0.000074764000f, 0.000104870000f,
//  0.000146220000f, 0.000202660000f, 0.000279230000f, 0.000382450000f, 0.000520720000f,
//  0.000704776000f, 0.000948230000f, 0.001268200000f, 0.001686100000f, 0.002228500000f,
//  0.002927800000f, 0.003823700000f, 0.004964200000f, 0.006406700000f, 0.008219300000f,
//  0.010482200000f, 0.013289000000f, 0.016747000000f, 0.020980000000f, 0.026127000000f,
//  0.032344000000f, 0.039802000000f, 0.048691000000f, 0.059210000000f, 0.071576000000f,
//  0.086010900000f, 0.102740000000f, 0.122000000000f, 0.144020000000f, 0.168990000000f,
//  0.197120000000f, 0.228570000000f, 0.263470000000f, 0.301900000000f, 0.343870000000f,
//  0.389366000000f, 0.437970000000f, 0.489220000000f, 0.542900000000f, 0.598810000000f,
//  0.656760000000f, 0.716580000000f, 0.778120000000f, 0.841310000000f, 0.906110000000f,
//  0.972542000000f, 1.038900000000f, 1.103100000000f, 1.165100000000f, 1.224900000000f,
//  1.282500000000f, 1.338200000000f, 1.392600000000f, 1.446100000000f, 1.499400000000f,
//  1.553480000000f, 1.607200000000f, 1.658900000000f, 1.708200000000f, 1.754800000000f,
//  1.798500000000f, 1.839200000000f, 1.876600000000f, 1.910500000000f, 1.940800000000f,
//  1.967280000000f, 1.989100000000f, 2.005700000000f, 2.017400000000f, 2.024400000000f,
//  2.027300000000f, 2.026400000000f, 2.022300000000f, 2.015300000000f, 2.006000000000f,
//  1.994800000000f, 1.981400000000f, 1.965300000000f, 1.946400000000f, 1.924800000000f,
//  1.900700000000f, 1.874100000000f, 1.845100000000f, 1.813900000000f, 1.780600000000f,
//  1.745370000000f, 1.709100000000f, 1.672300000000f, 1.634700000000f, 1.595600000000f,
//  1.554900000000f, 1.512200000000f, 1.467300000000f, 1.419900000000f, 1.370000000000f,
//  1.317560000000f, 1.262400000000f, 1.205000000000f, 1.146600000000f, 1.088000000000f,
//  1.030200000000f, 0.973830000000f, 0.919430000000f, 0.867460000000f, 0.818280000000f,
//  0.772125000000f, 0.728290000000f, 0.686040000000f, 0.645530000000f, 0.606850000000f,
//  0.570060000000f, 0.535220000000f, 0.502340000000f, 0.471400000000f, 0.442390000000f,
//  0.415254000000f, 0.390024000000f, 0.366399000000f, 0.344015000000f, 0.322689000000f,
//  0.302356000000f, 0.283036000000f, 0.264816000000f, 0.247848000000f, 0.232318000000f,
//  0.218502000000f, 0.205851000000f, 0.193596000000f, 0.181736000000f, 0.170281000000f,
//  0.159249000000f, 0.148673000000f, 0.138609000000f, 0.129096000000f, 0.120215000000f,
//  0.112044000000f, 0.104710000000f, 0.098196000000f, 0.092361000000f, 0.087088000000f,
//  0.082248000000f, 0.077744000000f, 0.073456000000f, 0.069268000000f, 0.065060000000f,
//  0.060709000000f, 0.056457000000f, 0.052609000000f, 0.049122000000f, 0.045954000000f,
//  0.043050000000f, 0.040368000000f, 0.037839000000f, 0.035384000000f, 0.032949000000f,
//  0.030451000000f, 0.028029000000f, 0.025862000000f, 0.023920000000f, 0.022174000000f,
//  0.020584000000f, 0.019127000000f, 0.017740000000f, 0.016403000000f, 0.015064000000f,
//  0.013676000000f, 0.012308000000f, 0.011056000000f, 0.009915000000f, 0.008872000000f,
//  0.007918000000f, 0.007030000000f, 0.006223000000f, 0.005453000000f, 0.004714000000f,
//  0.003988000000f, 0.003289000000f, 0.002646000000f, 0.002063000000f, 0.001533000000f,
//  0.001091000000f, 0.000711000000f, 0.000407000000f, 0.000184000000f, 0.000047000000f};
//








//#define CML_X2VALENCES_STILESBURCH1955_MIN 390.f
//#define CML_X2VALENCES_STILESBURCH1955_MAX 730.f
//#define CML_X2VALENCES_STILESBURCH1955_NUM 69
//static const float x2valencesStilesBurch1955[CML_X2VALENCES_STILESBURCH1955_NUM] = {
//  0.005035f, 0.012873f, 0.025933f, 0.054264f, 0.093147f, 0.144597f, 0.207609f, 0.266538f, 0.303933f, 0.336185f, 
//  0.356549f, 0.364180f, 0.328209f, 0.286053f, 0.262928f, 0.210562f, 0.182549f, 0.131014f, 0.081974f, 0.045980f, 
//  0.020673f, 0.008302f, 0.004814f, 0.008248f, 0.024412f, 0.050113f, 0.084255f, 0.131255f, 0.186757f, 0.243224f, 
//  0.298768f, 0.359848f, 0.428510f, 0.500880f, 0.571271f, 0.650846f, 0.742250f, 0.829040f, 0.905369f, 0.971275f, 
//  1.024797f, 1.060952f, 1.071632f, 1.054762f, 1.012750f, 0.947501f, 0.861487f, 0.761200f, 0.654122f, 0.548338f, 
//  0.450269f, 0.361237f, 0.281687f, 0.213565f, 0.158588f, 0.115934f, 0.083874f, 0.060355f, 0.043191f, 0.030661f, 
//  0.021532f, 0.014822f, 0.010047f, 0.006832f, 0.004755f, 0.003363f, 0.002330f, 0.001623f, 0.001136f};
//
//#define CML_Y2VALENCES_STILESBURCH1955_MIN 390.f
//#define CML_Y2VALENCES_STILESBURCH1955_MAX 730.f
//#define CML_Y2VALENCES_STILESBURCH1955_NUM 69
//static const float y2valencesStilesBurch1955[CML_Y2VALENCES_STILESBURCH1955_NUM] = {
//  0.000021f, 0.000137f, 0.000267f, 0.000499f, 0.000959f, -0.000352f, -0.000535f, -0.002306f, -0.001139f, 0.001507f, 
//  0.007142f, 0.012389f, 0.022879f, 0.037200f, 0.054616f,  0.080087f,  0.108008f,  0.140411f,  0.170719f, 0.199791f, 
//  0.240641f, 0.297681f, 0.367645f, 0.455184f, 0.546333f,  0.641762f,  0.736259f,  0.813393f,  0.873858f, 0.911828f, 
//  0.931983f, 0.954960f, 0.971754f, 0.970171f, 0.950790f,  0.937240f,  0.932444f,  0.903026f,  0.857070f, 0.815886f, 
//  0.769666f, 0.712437f, 0.651257f, 0.588631f, 0.523557f,  0.457801f,  0.393963f,  0.332964f,  0.275541f, 0.223722f, 
//  0.179091f, 0.140943f, 0.108310f, 0.081218f, 0.059780f,  0.043398f,  0.031238f,  0.022406f,  0.016003f, 0.011340f, 
//  0.007953f, 0.005473f, 0.003713f, 0.002527f, 0.001759f,  0.001244f,  0.000863f,  0.000602f,  0.000422f};
//
//#define CML_Z2VALENCES_STILESBURCH1955_MIN 390.f
//#define CML_Z2VALENCES_STILESBURCH1955_MAX 730.f
//#define CML_Z2VALENCES_STILESBURCH1955_NUM 69
//static const float z2valencesStilesBurch1955[CML_Z2VALENCES_STILESBURCH1955_NUM] = {
//   0.023163f,  0.059308f,  0.118897f,  0.250907f,  0.433765f,  0.684409f,  0.999185f,  1.308097f,  1.518706f,  1.707302f, 
//   1.840521f,  1.906560f,  1.756384f,  1.578949f,  1.505983f,  1.283002f,  1.178612f,  0.947751f,  0.709500f,  0.529689f, 
//   0.398963f,  0.310980f,  0.240664f,  0.188969f,  0.145151f,  0.110796f,  0.087421f,  0.069953f,  0.059951f,  0.051960f, 
//   0.042905f,  0.037710f,  0.033821f,  0.028764f,  0.023371f,  0.018909f,  0.015103f,  0.009656f,  0.003595f, -0.001221f, 
//  -0.005978f, -0.010905f, -0.014270f, -0.016302f, -0.018412f, -0.019889f, -0.019510f, -0.017854f, -0.015815f, -0.013632f, 
//  -0.011388f, -0.009171f, -0.007076f, -0.005238f, -0.003775f, -0.002692f, -0.001946f, -0.001447f, -0.001074f, -0.000766f, 
//  -0.000527f, -0.000357f, -0.000242f, -0.000164f, -0.000113f, -0.000077f, -0.000051f, -0.000034f, -0.000023f};









// Following are the illumination definitions found in colorimetry.
// The values are listed here for documentational reason and error checking.
// A value of 1/3 for Blackbody and custom D illuminant are placeholders
// The format of the array is:
// temperature, Y2, x2, y2, Y10, x10, y10
//static const float illuminationvalues[CML_NUMBER_OF_ILLUMINATIONS][7] = {
//  {5000.f,              100.f, .0f    ,  .0f    ,  100.f, .0f    ,  .0f    },   // CML_ILLUMINATION_BLACKBODY    *
//  {2848.f,              100.f, .44758f,  .40745f,  100.f, .45117f,  .40594f},   // CML_ILLUMINATION_A_CIE        *
//  {2848.f * CML_A_TEMPERATURE_CORRECTION_FACTOR,  100.f, .44757f,  .40745f,  100.f, .45117f,  .40594f},   // CML_ILLUMINATION_A_EXACT      *
//  {4874.f,              100.f, .34842f,  .35161f,  100.f, .3498f ,  .3527f },   // CML_ILLUMINATION_B            *
//  {6774.f,              100.f, .31006f,  .31616f,  100.f, .31039f,  .31905f},   // CML_ILLUMINATION_C            *
//  {5000.f,              100.f, .0f    ,  .0f    ,  100.f, .0f    ,  .0f    },   // CML_ILLUMINATION_D_ILLUMINANT *
//  {5000.f * CML_D_TEMPERATURE_CORRECTION_FACTOR,  100.f, .34567f,  .35850f,  100.f, .34773f,  .35952f},   // CML_ILLUMINATION_D50          *
//  {5500.f * CML_D_TEMPERATURE_CORRECTION_FACTOR,  100.f, .33242f,  .34743f,  100.f, .33411f,  .34877f},   // CML_ILLUMINATION_D55          *
//  {6500.f * CML_D_TEMPERATURE_CORRECTION_FACTOR,  100.f, .31271f,  .32902f,  100.f, .31382f,  .33100f},   // CML_ILLUMINATION_D65          *
//  {7500.f * CML_D_TEMPERATURE_CORRECTION_FACTOR,  100.f, .29902f,  .31485f,  100.f, .29968f,  .31740f},   // CML_ILLUMINATION_D75          *
//  {9300.f * CML_D_TEMPERATURE_CORRECTION_FACTOR,  100.f, .28480f,  .29320f,  100.f, .0f    ,  .0f    },   // CML_ILLUMINATION_D93          *
//  {5455.f,              100.f,  1.f/3.f,  1.f/3.f, 100.f,  1.f/3.f,  1.f/3.f},  // CML_ILLUMINATION_E            *
//  {6430.f,              100.f, .31310f,  .33727f,  100.f, .31811f,  .33559f},   // CML_ILLUMINATION_F1           *
//  {4230.f,              100.f, .37208f,  .37529f,  100.f, .37925f,  .36733f},   // CML_ILLUMINATION_F2           *
//  {3450.f,              100.f, .40910f,  .39430f,  100.f, .41761f,  .38324f},   // CML_ILLUMINATION_F3           *
//  {2940.f,              100.f, .44018f,  .40329f,  100.f, .44920f,  .39074f},   // CML_ILLUMINATION_F4           *
//  {6350.f,              100.f, .31379f,  .34531f,  100.f, .31975f,  .34246f},   // CML_ILLUMINATION_F5           *
//  {4150.f,              100.f, .37790f,  .38835f,  100.f, .38660f,  .37847f},   // CML_ILLUMINATION_F6           *
//  {6500.f,              100.f, .31292f,  .32933f,  100.f, .31569f,  .32960f},   // CML_ILLUMINATION_F7           *
//  {5000.f,              100.f, .34588f,  .35875f,  100.f, .34902f,  .35939f},   // CML_ILLUMINATION_F8           *
//  {4150.f,              100.f, .37417f,  .37281f,  100.f, .37829f,  .37045f},   // CML_ILLUMINATION_F9           *
//  {5000.f,              100.f, .34609f,  .35986f,  100.f, .35090f,  .35444f},   // CML_ILLUMINATION_F10          *
//  {4000.f,              100.f, .38052f,  .37713f,  100.f, .38541f,  .37123f},   // CML_ILLUMINATION_F11          *
//  {3000.f,              100.f, .43695f,  .40441f,  100.f, .44256f,  .39717f},   // CML_ILLUMINATION_F12          *
//  {3000.f,              100.f, .0f    ,  .0f    ,  100.f, .0f    ,  .0f    },   // CML_ILLUMINATION_XENON        *
//};




//void ColorMachine::adjustIntegrationToObserver(){
//  switch(s->observer.state){
//  case CML_OBSERVER_2DEG_1931:
//    s->inputoutput.minlambda = CML_X2VALENCES_1931_MIN;
//    s->inputoutput.maxlambda = CML_X2VALENCES_1931_MAX;
//    s->inputoutput.samplecount = CML_X2VALENCES_1931_NUM;
//    break;
//  case CML_OBSERVER_10DEG_1964:
//    s->inputoutput.minlambda = CML_X10VALENCES_1964_MIN;
//    s->inputoutput.maxlambda = CML_X10VALENCES_1964_MAX;
//    s->inputoutput.samplecount = CML_X10VALENCES_1964_NUM;
//    break;
//  case CML_OBSERVER_2DEG_CIE_1931:
//    s->inputoutput.minlambda = CML_X2VALENCES_CIE1931_MIN;
//    s->inputoutput.maxlambda = CML_X2VALENCES_CIE1931_MAX;
//    s->inputoutput.samplecount = CML_X2VALENCES_CIE1931_NUM;
//    break;
//  case CML_OBSERVER_10DEG_CIE_1964:
//    s->inputoutput.minlambda = CML_X10VALENCES_CIE1964_MIN;
//    s->inputoutput.maxlambda = CML_X10VALENCES_CIE1964_MAX;
//    s->inputoutput.samplecount = CML_X10VALENCES_CIE1964_NUM;
//    break;
//  case CML_OBSERVER_2DEG_JUDD_1951:
//    s->inputoutput.minlambda = CML_X2VALENCES_JUDD1951_MIN;
//    s->inputoutput.maxlambda = CML_X2VALENCES_JUDD1951_MAX;
//    s->inputoutput.samplecount = CML_X2VALENCES_JUDD1951_NUM;
//    break;
//  case CML_OBSERVER_2DEG_JUDD_VOS_1978:
//    s->inputoutput.minlambda = CML_X2VALENCES_JUDDVOS1978_MIN;
//    s->inputoutput.maxlambda = CML_X2VALENCES_JUDDVOS1978_MAX;
//    s->inputoutput.samplecount = CML_X2VALENCES_JUDDVOS1978_NUM;
//    break;
////  case CML_OBSERVER_2DEG_STILES_BURCH_1955:
////    s->inputoutput.minlambda = CML_X2VALENCES_STILESBURCH1955_MIN;
////    s->inputoutput.maxlambda = CML_X2VALENCES_STILESBURCH1955_MAX;
////    s->inputoutput.samplecount = CML_X2VALENCES_STILESBURCH1955_NUM;
////    break;
////  case CML_OBSERVER_2DEG_SHAW_FAIRCHILD_1997:
////    s->inputoutput.minlambda = CML_X2VALENCES_SHAWFAIRCHILD1997_MIN;
////    s->inputoutput.maxlambda = CML_X2VALENCES_SHAWFAIRCHILD1997_MAX;
////    s->inputoutput.samplecount = CML_X2VALENCES_SHAWFAIRCHILD1997_NUM;
////    break;
//  default:
//    #if CML_DEBUG
//      CMLError("Error in libcml: Observer state unknown\n");
//    #endif
//    break;
//  }
//}








//
//// A function interpolating and extrapolating values distributed according the
//// given coordinate array. f(coord) = value. Warning: Even though this is an
//// array lookup function, it can be rather slow!
//class CMLSampleArrayFunction : public CMLFunction{
//  struct CMLSampleArrayFunctionStorage *s;
//public:
//  CMLSampleArrayFunction();
//  ~CMLSampleArrayFunction();
//  CMLSampleArrayFunction( CMLArray coords,
//                          CMLArray values,
//                          CMLInterpolationMethod newinterpolationmethod,
//                          CMLExtrapolationMethod newextrapolationmethod);
//  void init(              CMLArray coords,
//                          CMLArray values,
//                          CMLInterpolationMethod newinterpolationmethod,
//                          CMLExtrapolationMethod newextrapolationmethod);
//  float operator ()(float x) const;
//  CMLFunction* duplicate() const;
//};


//struct CMLSampleArrayFunctionStorage{
//  CMLArray values;
//  CMLArray coords;
//  size_t maxindex;
//  float (CMLSampleArrayFunctionStorage:: *extrapolateDown)(float x);
//  float (CMLSampleArrayFunctionStorage:: *extrapolateUp)(float x);
//  float (CMLSampleArrayFunctionStorage:: *interpolate)(float index);
//
//  float InternalSampleArrayFunctionExtrapolateDownZero(float x);
//  float InternalSampleArrayFunctionExtrapolateDownClamp(float x);
//  float InternalSampleArrayFunctionExtrapolateDownGradient(float x);
//  float InternalSampleArrayFunctionExtrapolateUpZero(float x);
//  float InternalSampleArrayFunctionExtrapolateUpClamp(float x);
//  float InternalSampleArrayFunctionExtrapolateUpGradient(float x);
//
//  float InternalSampleArrayFunctionInterpolateNone(float index);
//  float InternalSampleArrayFunctionInterpolateFloor(float index);
//  float InternalSampleArrayFunctionInterpolateBox(float index);
//  float InternalSampleArrayFunctionInterpolateInterval(float index);
//  float InternalSampleArrayFunctionInterpolateLinear(float index);
//};
//
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateDownZero(float x){
//  x = x;  // no warning
//  return 0.f;
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateDownClamp(float x){
//  x = x;  // no warning
//  return values[0];
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateDownGradient(float x){
//  float index = (x - coords[0]) / (coords[1] - coords[0]);
//  return values[0] + (values[1] - values[0]) * index;
//}
//
//
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateUpZero(float x){
//  x = x;  // no warning
//  return 0.f;
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateUpClamp(float x){
//  x = x;  // no warning
//  return values[maxindex];
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateUpGradient(float x){
//  float index = (x - coords[maxindex]) / (coords[maxindex - 1] - coords[maxindex]);
//  return values[maxindex] + (values[maxindex - 1] - values[maxindex]) * index;
//}
//
//
//
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateNone(float index){
//  size_t i = (size_t)index;
//  if(float(i) == index){
//    return values[i];
//  }else{
//    return 0.f;
//  }
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateFloor(float index){
//  return values[(size_t)index];
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateBox(float index){
//  return values[(size_t)(index + .5f)];
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateInterval(float index){
//  return values[(size_t)(index + index / (float)maxindex)];
//}
//
//float CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateLinear(float index){
//  size_t i1 = (size_t)index;
//  size_t i2 = i1 + 1;
//  float alpha = index - float(i1);
//  return values[i1] - (values[i1] - values[i2]) * alpha;
//}
//
//
//
//CMLSampleArrayFunction::CMLSampleArrayFunction() : s(CML_NULL){}
//CMLSampleArrayFunction::~CMLSampleArrayFunction(){delete s;}
//CMLSampleArrayFunction::CMLSampleArrayFunction(CMLArray coordsarray, CMLArray valuearray, CMLInterpolationMethod newinterpolationmethod, CMLExtrapolationMethod newextrapolationmethod) :
//  s(CML_NULL){
//  init(coordsarray, valuearray, newinterpolationmethod, newextrapolationmethod);
//}
//
//void CMLSampleArrayFunction::init(CMLArray coordsarray, CMLArray valuearray, CMLInterpolationMethod newinterpolationmethod, CMLExtrapolationMethod newextrapolationmethod){
//  #if CML_DEBUG
//    if(valuearray.getSize() != coordsarray.getSize()){CMLError("Warning: SampleArrayFunction has two arrays with different sizes.\n"); return;}
//    if(coordsarray.getSize() <= 1){CMLError("Warning: SampleArrayFunction with 0 or 1 Entries are not allowed.\n"); return;}
//  #endif
//  if(s){delete s;}
//  s = new CMLSampleArrayFunctionStorage;
//  s->values = valuearray;
//  s->coords = coordsarray;
//  s->maxindex = valuearray.getSize() - 1;
//  
//  switch(newextrapolationmethod){
//  case CML_EXTRAPOLATION_CLAMP_ZERO:
//    s->extrapolateDown = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateDownZero;
//    s->extrapolateUp   = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateUpZero;
//    break;
//  case CML_EXTRAPOLATION_CLAMP:
//    s->extrapolateDown = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateDownClamp;
//    s->extrapolateUp   = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateUpClamp;
//    break;
//  case CML_EXTRAPOLATION_GRADIENT:
//    s->extrapolateDown = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateDownGradient;
//    s->extrapolateUp   = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionExtrapolateUpGradient;
//    break;
//  default:
//    #if CML_DEBUG
//      CMLError("Undefined Extrapolation method.\n");
//    #endif
//    delete s; s = CML_NULL; return; break;
//  }
//
//  switch(newinterpolationmethod){
//  case CML_INTERPOLATION_NONE:          s->interpolate = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateNone; break;
//  case CML_INTERPOLATION_FLOOR:         s->interpolate = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateFloor; break;
//  case CML_INTERPOLATION_BOX:           s->interpolate = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateBox; break;
//  case CML_INTERPOLATION_INTERVAL:      s->interpolate = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateInterval; break;
//  case CML_INTERPOLATION_LINEAR:        s->interpolate = &CMLSampleArrayFunctionStorage::InternalSampleArrayFunctionInterpolateLinear; break;
//  default:
//    #if CML_DEBUG
//      CMLError("Undefined Interpolation method.\n");
//    #endif
//    delete s; s = CML_NULL; return; break;
//  }
//
//}
//
//
//float CMLSampleArrayFunction::operator ()(float x) const{
//  #if CML_DEBUG
//    if(!s){CMLError("Function uninitialized.\n"); return 0.f;}
//  #endif
//  if(x == s->coords[0]){return s->values[0];}
//  else if(x == s->coords[s->maxindex]){return s->values[s->maxindex];}
//  else if(x < s->coords[0]){return (s->*(s->extrapolateDown))(x);}
//  else if(x > s->coords[s->maxindex]){return (s->*(s->extrapolateUp))(x);}
//  else{
//    size_t i1 = 0;
//    size_t i2 = s->maxindex;
//    // Binary search
//    while(i2-i1 > 1){
//      size_t m = (i1 + i2) / 2;
//      if(s->coords[m] > x){i2 = m;}else{i1 = m;}
//    }
//    float index = float(i1) + (x - s->coords[i1]) / (s->coords[i2] - s->coords[i1]);
//    return (s->*(s->interpolate))(index);
//  }
//}
//
//CMLFunction* CMLSampleArrayFunction::duplicate() const {
//  #if CML_DEBUG
//    if(!s){CMLError("Function uninitialized.\n"); return CML_NULL;}
//  #endif
//  CMLSampleArrayFunction* newfunction = new CMLSampleArrayFunction;
//  newfunction->s = new CMLSampleArrayFunctionStorage;
//
//  newfunction->s->values = s->values;
//  newfunction->s->coords = s->coords;
//  newfunction->s->maxindex = s->maxindex;
//  newfunction->s->interpolate = s->interpolate;
//  newfunction->s->extrapolateDown = s->extrapolateDown;
//  newfunction->s->extrapolateUp = s->extrapolateUp;
//
//  return newfunction;
//}
//
////CMLArray CMLSampleArrayFunction::getValues() const{
////  #if CML_DEBUG
////    if(!s){CMLError("Function uninitialized.\n");}
////  #endif
////  return s->values;
////}
////CMLArray CMLSampleArrayFunction::getCoords() const{
////  #if CML_DEBUG
////    if(!s){CMLError("Function uninitialized.\n");}
////  #endif
////  return s->coords;
////}
////
//



//
//// 5nm steps
//#define CML_D50_ILLUMINANT_ENTRYCOUNT 97
//#define CML_D50_ILLUMINANT_MIN   300.f
//#define CML_D50_ILLUMINANT_MAX   780.f
//// Values the same as in ISO 3364:2008, but with 3 decimal digits. Probably
//// published under CIE 15
//const float dilluminantCIE15d50[CML_D50_ILLUMINANT_ENTRYCOUNT] =
//  { 0.019f,   1.035f,   2.051f,   4.914f,   7.778f,  11.263f,  14.748f,  16.348f,  17.948f,  19.479f,
//   21.010f,  22.476f,  23.942f,  25.451f,  26.961f,  25.724f,  24.488f,  27.179f,  29.871f,  39.589f,
//   49.308f,  52.910f,  56.513f,  58.273f,  60.034f,  58.926f,  57.818f,  66.321f,  74.825f,  81.036f,
//   87.247f,  88.930f,  90.612f,  90.990f,  91.368f,  93.238f,  95.109f,  93.536f,  91.963f,  93.843f,
//   95.724f,  96.169f,  96.613f,  96.871f,  97.129f,  99.614f, 102.100f, 101.430f, 100.750f, 101.540f,
//  102.320f, 101.160f, 100.000f,  98.868f,  97.735f,  98.327f,  98.918f,  96.208f,  93.499f,  95.593f,
//   97.688f,  98.478f,  99.269f,  99.155f,  99.042f,  97.382f,  95.722f,  97.290f,  98.857f,  97.262f,
//   95.667f,  96.929f,  98.190f, 100.600f, 103.000f, 101.070f,  99.133f,  93.257f,  87.381f,  89.492f,
//   91.604f,  92.246f,  92.889f,  84.872f,  76.854f,  81.683f,  86.511f,  89.546f,  92.580f,  85.405f,
//   78.230f,  67.961f,  57.692f,  70.307f,  82.923f,  80.599f,  78.274f};
//
//// 10nm steps
//#define CML_D65_ILLUMINANT_ENTRYCOUNT 54
//#define CML_D65_ILLUMINANT_MIN   300.f
//#define CML_D65_ILLUMINANT_MAX   830.f
//// Values from the publicly avaliable distribution of CIE. Original values
//// available in 5nm steps but each odd sampling point corresponds to the
//// linear interpolation of the even sampling points. Therefore it has been
//// converted to 10nm.
//const float dilluminantCIEd65[CML_D65_ILLUMINANT_ENTRYCOUNT] =
//  { 0.0341f,   3.2945f,  20.2360f,  37.0535f,  39.9488f,  44.9117f,  46.6383f,  52.0891f,  49.9755f,  54.6482f,
//   82.7549f,  91.4860f,  93.4318f,  86.6823f, 104.8650f, 117.0080f, 117.8120f, 114.8610f, 115.9230f, 108.8110f,
//  109.3540f, 107.8020f, 104.7900f, 107.6890f, 104.4050f, 104.0460f, 100.0000f,  96.3342f,  95.7880f,  88.6856f,
//   90.0062f,  89.5991f,  87.6987f,  83.2886f,  83.6992f,  80.0268f,  80.2146f,  82.2778f,  78.2842f,  69.7213f,
//   71.6091f,  74.3490f,  61.6040f,  69.8856f,  75.0870f,  63.5927f,  46.4182f,  66.8054f,  63.3828f,  64.3040f,
//   59.4519f,  51.9590f,  57.4406f,  60.3125f};



//
//
//// Base class for any float-to-float-function
////
//// Ihnerit this class and you can use any arbitrary function float -> float
//// as input for CML. Useful for any kind of spectral curves. See the
//// CMLCompositeFunctions.h file for further information and examples.
//class CMLFunction{
//public:
//  CMLFunction(){}
//  virtual ~CMLFunction(){}
//  
//  // The () operator returns the function value for the given x. You MUST
//  // overwrite this method if you inherit from this class.
//  virtual float operator()(float x) const = 0;
//  
//  // The duplicate method creates and returns an exact copy of this function.
//  // You MUST overwrite this method if you inherit from this class.
//  virtual CMLFunction* duplicate() const = 0;
//
//  // Computes the sum of the componentwise products of this function and the
//  // given filterfunction.
//  virtual float filter(FunctionStorage filterfunction) const;
//
//  // Returns the maximal value which can occur.
//  virtual float getMaxValue() const;
//
//  // Overwrite the following method to define where integration or filtering
//  // is useful. See the CMLDefinitionRange struct for more information.
//  virtual CMLDefinitionRange getDefinitionRange() const;
//
//  // Creates an ArrayFunction of any given function
//  CMLArrayFunction* createArrayFunction(
//            float minimalvalue,
//            float maximalvalue,
//            size_t entrycount,
//            CMLInterpolationMethod interpolationmethod = CML_INTERPOLATION_LINEAR,
//            CMLExtrapolationMethod extrapolationmethod = CML_EXTRAPOLATION_CLAMP);
//
//};
//
//
//
//
//// A function interpolating and extrapolating an array of values.
//class CMLArrayFunction : public CMLFunction{
//  struct CMLArrayFunctionStorage *s;
//public:
//  CMLArrayFunction();
//  ~CMLArrayFunction();
//  CMLArrayFunction( const float* buffer,
//                    CMLBool ownbuffer,
//                    size_t entrycount,
//                    float newminimalcoord,
//                    float newmaximalcoord,
//                    CMLInterpolationMethod newinterpolationmethod,
//                    CMLExtrapolationMethod newextrapolationmethod);
//  void init(        const float* buffer,
//                    CMLBool ownbuffer,
//                    size_t entrycount,
//                    float newminimalcoord,
//                    float newmaximalcoord,
//                    CMLInterpolationMethod newinterpolationmethod,
//                    CMLExtrapolationMethod newextrapolationmethod);
//  float operator ()(float x) const;
//  CMLFunction* duplicate() const;
//  virtual CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//
//
//
//// /////////////////////////
//// ILLUMINATION SPECTRA
////
//// The following functions represent illumination spectra.
//// The input to these functions are expected to be in the unit [nanometer].
//// /////////////////////////
//
//
//// Returns the intensity of a blackbody radiator with the given temperature in
//// [Kelvin] for a given wavelength lambda in [nanometer]. The calculation is
//// based on the physical constants from NIST based on CODATA 2006:
//// http://physics.nist.gov/constants
//
//class BlackBodyRadiator : public CMLFunction{
//  float temp;
//  float c;
//public:
//  BlackBodyRadiator(float temperature);
//  CMLFunction* duplicate() const;
//  // Note: lambda is expected in [nanometer].
//  float operator ()(float lambda) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//
//
//// Returns the intensity of a blackbody radiator defined by CIE at 2848 [Kelvin]
//// for a given wavelength lambda in [nanometer].
//// This is the CIE standard and gives the same results as published results
//// with a deviation of only about 1 in the fifth digit.
//// The results are not the same as the exact blackbody calculation above.
//class CMLCIEAIlluminant : public CMLFunction{
//public:
//  CMLCIEAIlluminant(){}
//  CMLFunction* duplicate() const;
//  // Note: lambda is expected in [nanometer].
//  float operator ()(float lambda) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//
//
//
//// Returns the intensity of a D illuminant defined by CIE with the given
//// temperature in [Kelvin] for a given wavelength lambda in [nanometer].
//// This class computes the spectrum with the CIE proposed Yuv matrix method.
//class CMLCIEDIlluminant : public CMLArrayFunction{
//  float temp;
//public:
//  CMLCIEDIlluminant(float temperature);
//  CMLFunction* duplicate() const;
//  void computeWhitePoint(float& wx, float& wy) const;
//};
//
//
//
//// /////////////////////////
//// RESPONSE CURVES
////
//// The following functions represent response curves. Both the input and the
//// output to these functions is in the range [0, 1].
//// /////////////////////////
//
//
//
//// A function returning the identity response. Unbounded.
//// The inverse response is the same.
//// This function also works with negative numbers: f(-x) = -f(x)
//class CMLLinearResponse : public CMLFunction{
//public:
//  CMLLinearResponse();
//  CMLFunction* duplicate() const;
//  float operator ()(float x) const;
//};
//
//
//
//
//// A function returning the response curve of a gamma curve. Unbounded.
//// You can create the inverse response by using 1/gamma.
//// This function also works with negative numbers: f(-x) = -f(x)
//class CMLGammaResponse : public CMLFunction{
//  float gamma;
//public:
//  CMLGammaResponse(float gamma);
//  CMLFunction* duplicate() const;
//  float operator ()(float x) const;
//};
//
//
//
//
//// A function returning the response curve of the sRGB color space. Unbounded
//// This function also works with negative numbers: f(-x) = -f(x)
//class CMLsRGBToXYZResponse : public CMLFunction{
//public:
//  CMLsRGBToXYZResponse(){}
//  CMLFunction* duplicate() const;
//  float operator ()(float x) const;
//};
//
//
//
//
//// A function resulting the inverse response curve of the sRGB color space.
//// Unbounded.
//// This function also works with negative numbers: f(-x) = -f(x)
//class CMLXYZTosRGBResponse : public CMLFunction{
//public:
//  CMLXYZTosRGBResponse(){}
//  CMLFunction* duplicate() const;
//  float operator ()(float x) const;
//};
//
//
//
//
//// A function returning the response curve of Lr to Yr. Used for LStar.
//// This function also works with negative numbers.
//class CMLLrToYrResponse : public CMLFunction{
//public:
//  CMLLrToYrResponse(){}
//  CMLFunction* duplicate() const;
//  float operator ()(float Lr) const;
//};
//
//
//
//
//// A function returning the response curve of Yr to Lr. Used for LStar.
//// This function also works with negative numbers.
//class CMLYrToLrResponse : public CMLFunction{
//public:
//  CMLYrToLrResponse(){}
//  CMLFunction* duplicate() const;
//  float operator ()(float r) const;
//};
//
//
//
//
//// A function returning the response curve of Lr to Yr. Used for LStar.
//// This function is according to standard. Note that the standard contains a
//// small discontinuity. Use the exact method CMLLrToYrResponse instead.
//// This function also works with negative numbers.
//class CMLLrToYrStandardResponse : public CMLFunction{
//public:
//  CMLLrToYrStandardResponse(){}
//  CMLFunction* duplicate() const;
//  float operator ()(float Lr) const;
//};
//
//
//
//
//// A function returning the response curve of Yr to Lr. Used for LStar.
//// This function is according to standard. Note that the standard contains a
//// small discontinuity. Use the exact method CMLYrToLrResponse instead.
//// This function also works with negative numbers.
//class CMLYrToLrStandardResponse : public CMLFunction{
//public:
//  CMLYrToLrStandardResponse(){}
//  CMLFunction* duplicate() const;
//  float operator ()(float r) const;
//};
//
//
//
//
//// /////////////////////////
//// FILTER FUNCTIONS
//// /////////////////////////
//
//// A function modeling a dirac peak at a given position. Returns 1 for that
//// position only and 0 otherwise.
//class CMLDiracFunction : public CMLFunction{
//  float pos;
//public:
//  CMLDiracFunction(float pos);
//  CMLFunction* duplicate() const;
//  float operator ()(float x) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//// A function that always returns a given constant number.
//class CMLConstFunction : public CMLFunction{
//  float value;
//public:
//  CMLConstFunction(float constvalue);
//  CMLFunction* duplicate() const;
//  float operator ()(float x) const;
//};
//
//
//
//// /////////////////////////
//// COMPOSITE FUNCTIONS
////
//// The following functions are provided to be able to mathemtically
//// add and subtract functions. This is needed for the SpectralColor class.
//// /////////////////////////
//
//// A word of advice: Composite functions are easy to use but using composite
//// functions too excessively can slow down your code dramatically. You may
//// want to use the createArrayFunction method of CMLFunction.
//
//
//
//
//// A function returning the value of another function multiplied with a scalar.
//class CMLFunctionMulScalar : public CMLFunction{
//  CMLFunction* func;
//  float factor;
//public:
//  CMLFunctionMulScalar(FunctionStorage function, float scalar);
//  ~CMLFunctionMulScalar();
//  CMLFunction* duplicate() const;
//  float operator()(float x) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//
//
//// A function returning the sum of the values of two other functions
//class CMLFunctionAddFunction : public CMLFunction{
//  CMLFunction* func1;
//  CMLFunction* func2;
//public:
//  CMLFunctionAddFunction(FunctionStorage function1, FunctionStorage function2);
//  ~CMLFunctionAddFunction();
//  CMLFunction* duplicate() const;
//  float operator()(float x) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//
//
//// A function returning the difference of the values of two other functions
//class CMLFunctionSubFunction : public CMLFunction{
//  CMLFunction* func1;
//  CMLFunction* func2;
//public:
//  CMLFunctionSubFunction(FunctionStorage function1, FunctionStorage function2);
//  ~CMLFunctionSubFunction();
//  CMLFunction* duplicate() const;
//  float operator()(float x) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//
//// A function returning the componentwise product of the values of two other
//// functions.
//class CMLFunctionMulFunction : public CMLFunction{
//  CMLFunction* func1;
//  CMLFunction* func2;
//public:
//  CMLFunctionMulFunction(FunctionStorage function1, FunctionStorage function2);
//  ~CMLFunctionMulFunction();
//  CMLFunction* duplicate() const;
//  float operator()(float x) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//
//
//// A function returning the componentwise division of the values of two other
//// functions.
//class CMLFunctionDivFunction : public CMLFunction{
//  CMLFunction* func1;
//  CMLFunction* func2;
//public:
//  CMLFunctionDivFunction(FunctionStorage function1, FunctionStorage function2);
//  ~CMLFunctionDivFunction();
//  CMLFunction* duplicate() const;
//  float operator()(float x) const;
//  CMLDefinitionRange getDefinitionRange() const;
//};
//
//




// Lab computation explanation:
//fy = (Lr + 16) / 116
//yr = fy^3	> ke
//yr = Lr/k	<=ke
//
//
//k = 24389/27
//e = 216/24389
//ke = 216/27
//
//cbrt(k) = 29/3
//cbrt(e) = 6/29
//
//
//(ke + 16) / 116
//(216/27 + 16) / 116
//(216/27 + 432/27) / 116
//(648/27) / 116
//648/3132
//6/29 = cbrt(e)
//
//xr	= fx^3			fx>cbrt(e)
//	= (116*fx-16)/k		fx<=cbrt(e)
//
//yr	= fy^3			fy>cbrt(e)
//	= (116*fy-16)/k		fy<=cbrt(e)
//
//zr	= fz^3			fz>cbrt(e)
//	= (116*fz-16)/k		fz<=cbrt(e)
//
//
//
//
//// Response curve:
//yr	= ((Lr+16)/116)^3	(Lr+16)/116 > cbrt(e)
//	= Lr/k			(Lr+16)/116 <= cbrt(e)
//
//
//
//
//(600/29 + 16) / 116
//(600/29 + 464/29) / 116
//1064 / 3364
//266 / 841
//
//696/2900 - 464/2900
//232/2900
//8/100
//
//
//cbrt(0.008856f) * 116/100 - 16/100


// Enumerates the possible interpretations of Gray and CMYK colors
//typedef enum{
//  CML_MAX_IS_SOLID = 0,
//  CML_MAX_IS_WHITE
//} CMLChannelInterpretationType;
//
//#define CML_DEFAULT_CMYK_CHANNEL_INTERPRETATION CML_MAX_IS_SOLID
//#define CML_DEFAULT_GRAY_CHANNEL_INTERPRETATION CML_MAX_IS_SOLID


// Enumerates the different hue orientations
//typedef enum{
//  CML_HUE_COUNTERCLOCKWISE = 0,
//  CML_HUE_CLOCKWISE
//} CMLHueOrientationType;
//
// #define CML_DEFAULT_HUE_ORIENTATION             CML_HUE_COUNTERCLOCKWISE

//
//// Enumerates the different Density computations
//typedef enum{
//  CML_DENSITY_NARROW_BAND = 0,
//  CML_DENSITY_WIDE_BAND,
//  CML_NUMBER_OF_DENSITY_COMPUTATIONS
//} CMLDensityComputationType;

//#define CML_DENSITYFILTER_MIN 380.f
//#define CML_DENSITYFILTER_MAX 730.f
//#define CML_DENSITYFILTER_NUM 36
//static const float densityfilterC[] = {
//  0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,
//  0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.00013f, 0.00072f,
//  0.00509f, 0.31712f, 1.f,      0.80547f, 0.4923f,  0.21361f, 0.08165f, 0.03909f, 0.01125f, 0.0036f,
//  0.00209f, 0.00101f, 0.00033f, 0.00006f, 0.f,      0.f};
//static const float densityfilterM[] = {
//  0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.00018f,
//  0.0163f,  0.07243f, 0.391f,   0.80684f, 1.f,      0.99016f, 0.79953f, 0.55571f, 0.32835f, 0.16068f,
//  0.06172f, 0.01603f, 0.00424f, 0.00052f, 0.00005f, 0.f,      0.f,      0.f,      0.f,      0.f,
//  0.f,      0.f,      0.f,      0.f,      0.f,      0.f};
//static const float densityfilterY[] = {
//  0.00822f, 0.06851f, 0.26415f, 0.50777f, 0.8704f,  1.f,      0.92475f, 0.52543f, 0.2417f, 0.10509f,
//  0.03678f, 0.00596f, 0.0005f,  0.00001f, 0.f,      0.f,      0.f,      0.f,      0.f,      0.f,
//  0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,      0.f,
//  0.f,      0.f,      0.f,      0.f,      0.f,      0.f};
//static const float densityfilterK[] = {
//  0.f,      0.f,      0.00068f, 0.0012f,  0.00401f, 0.01148f, 0.02289f, 0.03824f, 0.05987f, 0.0911f,
//  0.14053f, 0.20874f, 0.32274f, 0.50636f, 0.71724f, 0.86771f, 0.9583f,  0.99889f, 1.f,      0.95855f,
//  0.87719f, 0.7597f,  0.63447f, 0.50636f, 0.38339f, 0.26609f, 0.17593f, 0.10753f, 0.06144f, 0.03215f,
//  0.01713f, 0.00824f, 0.00412f, 0.00211f, 0.00105f, 0.00052f};




//CML_INLINE void SpectralBlanktoDensityDivisor(float* CML_RESTRICT cmyk, FunctionStorage CML_RESTRICT blank, CMLDensityComputationType densitycomputation){
//  float blankval;
//  float illuminantvalue;
//  float imin;
//  float imax;
//  size_t samplecount;
//  CMLuint32 istep;
//  CMLCIEAIlluminant ailluminant;
//  CMLArray arraydensityfilterC;
//  CMLArray arraydensityfilterM;
//  CMLArray arraydensityfilterY;
//  CMLArray arraydensityfilterK;
//  CMLArrayFunction filterC;
//  CMLArrayFunction filterM;
//  CMLArrayFunction filterY;
//  CMLArrayFunction filterK;
//
//  switch(densitycomputation){
//  case CML_DENSITY_NARROW_BAND:
//    cmyk[0] = (*blank)(620.f);
//    cmyk[1] = (*blank)(530.f);
//    cmyk[2] = (*blank)(430.f);
//    cmyk[3] = cmyk[0] * 144.f + cmyk[1] * 79.f + cmyk[2] * 25.f;
//    break;
//  case CML_DENSITY_WIDE_BAND:
//    arraydensityfilterC.init(densityfilterC, CML_FALSE, CML_DENSITYFILTER_NUM); break;
//    arraydensityfilterM.init(densityfilterM, CML_FALSE, CML_DENSITYFILTER_NUM); break;
//    arraydensityfilterY.init(densityfilterY, CML_FALSE, CML_DENSITYFILTER_NUM); break;
//    arraydensityfilterK.init(densityfilterK, CML_FALSE, CML_DENSITYFILTER_NUM); break;
//    filterC.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterC, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    filterM.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterM, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    filterY.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterY, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    filterK.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterK, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    imin = CML_DEFAULT_INTEGRATION_MIN;
//    imax = CML_DEFAULT_INTEGRATION_MAX;
//    samplecount = cmlGetSampleCount(CML_DEFAULT_INTEGRATION_MIN, CML_DEFAULT_INTEGRATION_MAX, CML_DEFAULT_INTEGRATION_STEPSIZE);
//    cmlSet4(cmyk, 0.f, 0.f, 0.f, 0.f);
//    for(istep = 0; istep < samplecount; istep++){
//      float l = imin + (((imax - imin) * istep) / (samplecount - 1));
//      illuminantvalue = ailluminant(l);
//      blankval = (*blank)(l);
//      cmyk[0] += blankval * illuminantvalue * filterC(l);
//      cmyk[1] += blankval * illuminantvalue * filterM(l);
//      cmyk[2] += blankval * illuminantvalue * filterY(l);
//      cmyk[3] += blankval * illuminantvalue * filterK(l);
//    }
//    break;
//  default: break;
//  }
//}
//
//
//void ColorMachine::SpectralColortoDensityCMYK(float* CML_RESTRICT cmyk, FunctionStorage const * CML_RESTRICT color, FunctionStorage const * CML_RESTRICT blank) const{
//  float colorvalue[4];
//  float blankvalue[4];
//  float filtervalue;
//  float colorval;
//  float illuminantvalue;
//  float imin;
//  float imax;
//  size_t samplecount;
//  CMLuint32 istep;
//  CMLCIEAIlluminant ailluminant;
//  CMLArray arraydensityfilterC;
//  CMLArray arraydensityfilterM;
//  CMLArray arraydensityfilterY;
//  CMLArray arraydensityfilterK;
//  CMLArrayFunction filterC;
//  CMLArrayFunction filterM;
//  CMLArrayFunction filterY;
//  CMLArrayFunction filterK;
//  
//  SpectralBlanktoDensityDivisor(blankvalue, *blank, s->cmykspace.densitycomputation);
//
//  cmlSet4(colorvalue, 0.f, 0.f, 0.f, 0.f);
//
//  switch(s->cmykspace.densitycomputation){
//  case CML_DENSITY_NARROW_BAND:
//    colorvalue[0] = (**color)(620.f);
//    colorvalue[1] = (**color)(530.f);
//    colorvalue[2] = (**color)(430.f);
//    cmyk[0] = - log10f(colorvalue[0] / blankvalue[0]);
//    cmyk[1] = - log10f(colorvalue[1] / blankvalue[1]);
//    cmyk[2] = - log10f(colorvalue[2] / blankvalue[2]);
//    cmyk[3] = - log10f(   (colorvalue[0] * 144.f + colorvalue[1] * 79.f + colorvalue[2] * 25.f)
//                        / blankvalue[3]);
//    break;
//  case CML_DENSITY_WIDE_BAND:
//    arraydensityfilterC.init(densityfilterC, CML_FALSE, CML_DENSITYFILTER_NUM);
//    arraydensityfilterM.init(densityfilterM, CML_FALSE, CML_DENSITYFILTER_NUM);
//    arraydensityfilterY.init(densityfilterY, CML_FALSE, CML_DENSITYFILTER_NUM);
//    arraydensityfilterK.init(densityfilterK, CML_FALSE, CML_DENSITYFILTER_NUM);
//    filterC.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterC, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    filterM.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterM, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    filterY.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterY, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    filterK.init(CML_DENSITYFILTER_MIN, CML_DENSITYFILTER_MAX, arraydensityfilterK, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//    imin = cmlcm->getMinIntegration();
//    imax = cmlcm->getMaxIntegration();
//    samplecount = cmlcm->getIntegrationSampleCount();
//    for(istep = 0; istep < samplecount; istep++){
//      float l = imin + (((imax - imin) * istep) / (samplecount - 1));
//      illuminantvalue = ailluminant(l);
//      colorval = (**color)(l);
//      filtervalue = illuminantvalue * filterC(l);
//      colorvalue[0] += colorval * filtervalue;
//      filtervalue = illuminantvalue * filterM(l);
//      colorvalue[1] += colorval * filtervalue;
//      filtervalue = illuminantvalue * filterY(l);
//      colorvalue[2] += colorval * filtervalue;
//      filtervalue = illuminantvalue * filterK(l);
//      colorvalue[3] += colorval * filtervalue;
//    }
//    cmyk[0] = - log10f(colorvalue[0] / blankvalue[0]);
//    cmyk[1] = - log10f(colorvalue[1] / blankvalue[1]);
//    cmyk[2] = - log10f(colorvalue[2] / blankvalue[2]);
//    cmyk[3] = - log10f(colorvalue[3] / blankvalue[3]);
//    break;
//  default: break;
//  }
//}
//


//CMLBool                ColorMachine::getCMYKChannelInterpretation() const                              {return (s->cmykspace.interpretation == CML_MAX_IS_WHITE);}
//void                ColorMachine::setCMYKChannelInterpretation(CMLChannelInterpretationType newinterpretation)    {s->cmykspace.interpretation = newinterpretation;}
//CMLDensityComputationType  ColorMachine::getDensityComputation() const                         {return s->cmykspace.densitycomputation;}
//void                ColorMachine::setDensityComputation(CMLDensityComputationType computation) {s->cmykspace.densitycomputation = computation;}



//  float getDensity(DensityFromSpectrumType type, SpectralColor* blank){
//    if(type <= CML_DENSITY_NARROW_BLACK){
//      switch(type){
//        case CML_DENSITY_NARROW_CYAN:     return - log10f((*color)(620.f) / (*blank->color)(620.f)); break;
//        case CML_DENSITY_NARROW_MAGENTA:  return - log10f((*color)(530.f) / (*blank->color)(530.f)); break;
//        case CML_DENSITY_NARROW_YELLOW:   return - log10f((*color)(430.f) / (*blank->color)(430.f)); break;
//        case CML_DENSITY_NARROW_BLACK:    return - log10f(((*color)(620.f) * 144.f + (*color)(530.f) * 79.f + (*color)(430.f) * 25.f) / ((*blank->color)(620.f) * 144.f + (*blank->color)(530.f) * 79.f + (*blank->color)(430.f) * 25.f)); break;
//        default: return -1.0f;
//      }
//    }else{
//      float weightedcolor = 0.f;
//      float weightedblank = 0.f;
//      CMLArray densityfilter;
//      switch(type){
//        case CML_DENSITY_BROAD_CYAN:     densityfilter.init(densityfilterC, CML_FALSE, densityfiltercount); break;
//        case CML_DENSITY_BROAD_MAGENTA:  densityfilter.init(densityfilterM, CML_FALSE, densityfiltercount); break;
//        case CML_DENSITY_BROAD_YELLOW:   densityfilter.init(densityfilterY, CML_FALSE, densityfiltercount); break;
//        case CML_DENSITY_BROAD_BLACK:    densityfilter.init(densityfilterK, CML_FALSE, densityfiltercount); break;
//        default: return -1.0f;
//      }
//      CMLArrayFunction filter = CMLArrayFunction(densityfiltermin, densityfiltermax, densityfilter, CML_INTERPOLATION_BOX, CML_EXTRAPOLATION_CLAMP_ZERO);
//      CMLCIEAIlluminant ailluminant;
//      float imin = cmlcm->getMinIntegration();
//      float imax = cmlcm->getMaxIntegration();
//      CMLuint32 intervals = cmlcm->getIntegrationIntervals();
//      for(CMLuint32 istep = 0; istep <= intervals; istep++){
//        float l = imin + (((imax - imin) * istep) / intervals);
//        weightedcolor += (*color)(l) * ailluminant(l) * filter(l);
//        weightedblank += (*blank->getFunction())(l) * ailluminant(l) * filter(l);
//      }
//      return - log10f(weightedcolor / weightedblank);
//    }
//  }
//
//  float getCoverage(DensityFromSpectrumType type, SpectralColor* blank, SpectralColor* solid){
//    float density       = getDensity(type, blank);
//    float soliddensity  = solid->getDensity(type, blank);
//    return (1.f - powf(10.f, -density)) / (1.f - powf(10.f, -soliddensity));
//  }
//
//  float getCoverage(DensityFromSpectrumType type, SpectralColor* blank, float soliddensity){
//    float density = getDensity(type, blank);
//    return (1.f - powf(10.f, -density)) / (1.f - powf(10.f, -soliddensity));
//  }
//
//  float getFraction(SpectralColor* blank, SpectralColor* solid){
//    float fraction = 0.f;
//    float sum = 0.f;
//    float imin = cmlcm->getMinIntegration();
//    float imax = cmlcm->getMaxIntegration();
//    CMLuint32 intervals = cmlcm->getIntegrationIntervals();
//    for(CMLuint32 istep = 0; istep <= intervals; istep++){
//      float l = imin + (((imax - imin) * istep) / intervals);
//      float diff  = (*blank->getFunction())(l)  - (*solid->getFunction())(l);
//      if(!cmlAlmostZero((*blank->getFunction())(l))){
//        sum += diff;
//      }
//    }
//    for(CMLuint32 istep = 0; istep <= intervals; istep++){
//      float l = imin + (((imax - imin) * istep) / intervals);
//      float diff  = (*blank->getFunction())(l)  - (*solid->getFunction())(l);
//      float cdiff = (*color)(l)                 - (*solid->getFunction())(l);
//      if(!cmlAlmostZero((*blank->getFunction())(l))){
//        float intensity = cdiff / diff;
//        fraction += (1.f - intensity) * diff / sum;
//      }
//    }
//    return fraction;
//  }

//
//// Enumerates the different delta-E computations
//typedef enum{
//  CML_DELTA_E_1976 = 0,
//  CML_NUMBER_OF_DELTA_E_COMPUTATIONS
//} CMLDeltaEComputationType;



// This is free and unencumbered software released into the public domain.

// Anyone is free to copy, modify, publish, use, compile, sell, or
// distribute this software, either in source code form or as a compiled
// binary, for any purpose, commercial or non-commercial, and by any
// means.

// In jurisdictions that recognize copyright laws, the author or authors
// of this software dedicate any and all copyright interest in the
// software to the public domain. We make this dedication for the benefit
// of the public at large and to the detriment of our heirs and
// successors. We intend this dedication to be an overt act of
// relinquishment in perpetuity of all present and future rights to this
// software under copyright law.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

// For more information, please refer to <http://unlicense.org/>
